<Type Name="MASService" FullName="MASFoundation.MASService">
  <TypeSignature Language="C#" Value="public class MASService : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MASService extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>MASFoundation.iOS</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MASService", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
        MASService is the base class for all services which are to be run during the internal service's lifecycle.
    </summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MASService (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MASService (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the Objective-C class.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
        <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LifecycleStatus">
      <MemberSignature Language="C#" Value="public virtual MASFoundation.MASServiceLifecycleStatus LifecycleStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MASFoundation.MASServiceLifecycleStatus LifecycleStatus" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("lifecycleStatus", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASServiceLifecycleStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current MASServiceLifecycleStatus of the MASService.</summary>
        <value>The MASServiceLifecycleStatus.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LifecycleStatusAsString">
      <MemberSignature Language="C#" Value="public virtual string LifecycleStatusAsString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LifecycleStatusAsString" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("lifecycleStatusAsString")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieve a human readable string value for the current MASServiceLifecycleStatus.</summary>
        <value>Returns the MASServiceLifecycleStatus in a human readable string.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LifecycleStatusToString">
      <MemberSignature Language="C#" Value="public static string LifecycleStatusToString (MASFoundation.MASServiceLifecycleStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LifecycleStatusToString(valuetype MASFoundation.MASServiceLifecycleStatus status) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("lifecycleStatusToString:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="MASFoundation.MASServiceLifecycleStatus" />
      </Parameters>
      <Docs>
        <param name="status">The MASServiceLifecycleStatus.</param>
        <summary>Retrieve a human readable string value for the given MASServiceLifecycleStatus.</summary>
        <returns>Returns the MASServiceLifecycleStatus in a human readable string.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceDidLoad">
      <MemberSignature Language="C#" Value="public virtual void ServiceDidLoad ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ServiceDidLoad() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("serviceDidLoad")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The lifecycle method to indicate to the service to perform an processes or acquire any resources it requires at the MASServiceLifecycleStatusLoaded state.</summary>
        <remarks>
            Subclasses should override this to do this for their specific requirements.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceDidReset">
      <MemberSignature Language="C#" Value="public virtual void ServiceDidReset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ServiceDidReset() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("serviceDidReset")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The lifecycle method to indicate the service should perform any processes or release any resources to bring the service to a default installation state.</summary>
        <remarks>
            Subclasses should override this to do this for their specific requirements.
            They should call this super version at the start of their override.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceDidStart">
      <MemberSignature Language="C#" Value="public virtual void ServiceDidStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ServiceDidStart() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("serviceDidStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The lifecycle method to indicate the service should perform any processes or acquire any resources at the MASServiceLifecycleStatusDidStart state.</summary>
        <remarks>
            Subclasses should override this to do this for their specific requirements.
            They should call this super version at the start of their override.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceDidStop">
      <MemberSignature Language="C#" Value="public virtual void ServiceDidStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ServiceDidStop() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("serviceDidStop")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The lifecycle method to indicate the service should perform any processes or release any resources at the MASServiceLifecycleStatusDidStop state.</summary>
        <remarks>
            Subclasses should override this to do this for their specific requirements.
            They should call this super version at the start of their override.                    
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceUUID">
      <MemberSignature Language="C#" Value="public static string ServiceUUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ServiceUUID" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("serviceUUID")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Retreives the UUID assigned to a particular MASService subclass.  All subclasses MUST
            implement this method with a unique value.  If it does not the super version will
            return null and the services will be rejected for membership in the internal MASService
            process.
        </summary>
        <value>Return the UUID assigned to the MASService subclass.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceWillStart">
      <MemberSignature Language="C#" Value="public virtual void ServiceWillStart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ServiceWillStart() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("serviceWillStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The lifecycle method to indicate the service should perform any processes or acquire any resources BEFORE it enters the MASServiceLifecycleStatusWillStart state.</summary>
        <remarks>
            Subclasses should override this to do this for their specific requirements.
            They should call this super version at the start of their override.                    
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceWillStop">
      <MemberSignature Language="C#" Value="public virtual void ServiceWillStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ServiceWillStop() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("serviceWillStop")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The lifecycle method to indicate the service should perform any processes or release any resources BEFORE it enters the MASServiceLifecycleStatusWillStop state.</summary>
        <remarks>
            Subclasses should override this to do this for their specific requirements.
            They should call this super version at the start of their override.                    
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedService">
      <MemberSignature Language="C#" Value="public static MASFoundation.MASService SharedService ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MASFoundation.MASService SharedService() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("sharedService")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASService</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieve the shared MASService singleton.</summary>
        <returns>Returns the shared MASService singleton.</returns>
        <remarks>
            Note, subclasses should override this version of the method.
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
