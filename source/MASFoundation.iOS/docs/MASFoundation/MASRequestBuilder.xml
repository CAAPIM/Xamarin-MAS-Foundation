<Type Name="MASRequestBuilder" FullName="MASFoundation.MASRequestBuilder">
  <TypeSignature Language="C#" Value="public class MASRequestBuilder : MASFoundation.MASObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MASRequestBuilder extends MASFoundation.MASObject" />
  <AssemblyInfo>
    <AssemblyName>MASFoundation.iOS</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MASFoundation.MASObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MASRequestBuilder", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
    MASRequestBuilder class is an object that allows developers to progressively build a request as needed.
    The class is mainly responsible to receive parameters and create a MASRequest object.
    <para>
    Default configuration value for designated initializer, new MASRequestBuilder("GET/PUT/POST/DELETE"), would be:
    isPublic: <c>false</c>,
    sign: <c>false</c>,
    requestType:MASRequestResponseType.Json, 
    responseType:MASRequestResponseType.Json.
    </para></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASRequestBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASRequestBuilder (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MASRequestBuilder (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MASRequestBuilder (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASRequestBuilder (string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string method) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithHTTPMethod:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="method">NSString of the HTTP Method (GET, POST, PUT, DELETE).</param>
        <summary>
        Designated initializer for MASRequestBuilder.
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary Body { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary Body" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("body", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBody:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        NSDictionary of type/value parameters to put into the body of a request.
        </summary>
        <value>The body.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Build">
      <MemberSignature Language="C#" Value="public virtual MASFoundation.MASRequest Build ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MASFoundation.MASRequest Build() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("build")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASRequest</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        Create a MASRequest object using the parameters from MASRequestBuider
        </summary>
        <returns>MASRequest object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Claims">
      <MemberSignature Language="C#" Value="public virtual MASFoundation.MASClaims Claims { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MASFoundation.MASClaims Claims" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("claims", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASClaims</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        MASClaims object containing claims for JWT.
        </summary>
        <value>The claims.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndPoint">
      <MemberSignature Language="C#" Value="public virtual string EndPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EndPoint" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("endPoint", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEndPoint:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        NSString value of the target endpoint.
        </summary>
        <value>The end point.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Header">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary Header { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary Header" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("header", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setHeader:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        NSDictionary of type/value parameters to put into the header of a request.
        </summary>
        <value>The header.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpMethod">
      <MemberSignature Language="C#" Value="public virtual string HttpMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HttpMethod" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("httpMethod", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        NSString value of the HTTP Method (GET, POST, PUT, DELETE).
        </summary>
        <value>The http method.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public virtual bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isPublic")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setIsPublic:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        bool value that determines whether or not to include credentials of primary gateway in the request.
        </summary>
        <value>
          <c>true</c> if is public; otherwise, <c>false</c>.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrivateKey">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData PrivateKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSData PrivateKey" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("privateKey", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        NSData value of private key.
        </summary>
        <value>The private key.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Query">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary Query { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary Query" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("query", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setQuery:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        NSDictionary of type/value parameters to put into the URL of a request.
        </summary>
        <value>The query.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestType">
      <MemberSignature Language="C#" Value="public virtual MASFoundation.MASRequestResponseType RequestType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MASFoundation.MASRequestResponseType RequestType" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("requestType", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setRequestType:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASRequestResponseType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        MASRequestResponseType value that specifies what type formatting is required for request body.
        </summary>
        <value>The type of the request.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseType">
      <MemberSignature Language="C#" Value="public virtual MASFoundation.MASRequestResponseType ResponseType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MASFoundation.MASRequestResponseType ResponseType" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("responseType", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setResponseType:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASRequestResponseType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        MASRequestResponseType value that specifies what type formatting is required for response body.
        </summary>
        <value>The type of the response.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSignWithClaims">
      <MemberSignature Language="C#" Value="public virtual void SetSignWithClaims (MASFoundation.MASClaims claims, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSignWithClaims(class MASFoundation.MASClaims claims, class Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setSignWithClaims:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="claims" Type="MASFoundation.MASClaims" />
        <Parameter Name="error" Type="Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="claims">MASClaims object containing claims for JWT</param>
        <param name="error">NSError error reference object that returns any error occurred during JWT signature.</param>
        <summary>
        Set to sign the request with a MASClaims object using default private key from device registration against primary gateway.
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSignWithClaims">
      <MemberSignature Language="C#" Value="public virtual void SetSignWithClaims (MASFoundation.MASClaims claims, Foundation.NSData privateKey, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSignWithClaims(class MASFoundation.MASClaims claims, class Foundation.NSData privateKey, class Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setSignWithClaims:privateKey:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="claims" Type="MASFoundation.MASClaims" />
        <Parameter Name="privateKey" Type="Foundation.NSData" />
        <Parameter Name="error" Type="Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="claims">MASClaims object containing claims for JWT</param>
        <param name="privateKey">Custom private key in NSData format signed using RS256 algorithm.</param>
        <param name="error">NSError error reference object that returns any error occurred during JWT signature.</param>
        <summary>
        Set to sign the request with a MASClaims object using custom private key in NSData format.
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSignWithError">
      <MemberSignature Language="C#" Value="public virtual void SetSignWithError (out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSignWithError(class Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setSignWithError:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="error">NSError error reference object that returns any error occurred during JWT signature.</param>
        <summary>
        Set to sign the body of request using default private key from device registration against primary gateway.
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sign">
      <MemberSignature Language="C#" Value="public virtual bool Sign { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sign" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("sign")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        bool value that determines whether or not digitally sign the request parameters with JWT signature.
        </summary>
        <value>
          <c>true</c> if sign; otherwise, <c>false</c>.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
