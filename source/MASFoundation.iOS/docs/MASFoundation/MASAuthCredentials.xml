<Type Name="MASAuthCredentials" FullName="MASFoundation.MASAuthCredentials">
  <TypeSignature Language="C#" Value="public class MASAuthCredentials : MASFoundation.MASObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MASAuthCredentials extends MASFoundation.MASObject" />
  <AssemblyInfo>
    <AssemblyName>MASFoundation.iOS</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MASFoundation.MASObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MASAuthCredentials", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
    The `MASAuthCredentials` class is a base class of all other auth credentials types supported in MASFoundation SDK.
    </summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASAuthCredentials ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASAuthCredentials (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MASAuthCredentials (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MASAuthCredentials (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the Objective-C class.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
        <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRegisterDevice">
      <MemberSignature Language="C#" Value="public virtual bool CanRegisterDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRegisterDevice" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("canRegisterDevice")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        Gets a value indicating whether this <see cref="T:MASFoundation.MASAuthCredentials" /> can register device.
        </summary>
        <value>
          <c>true</c> if can register device; otherwise, <c>false</c>.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearCredentials">
      <MemberSignature Language="C#" Value="public virtual void ClearCredentials ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearCredentials() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("clearCredentials")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        Clears the credentials.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CredentialsType">
      <MemberSignature Language="C#" Value="public virtual string CredentialsType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CredentialsType" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("credentialsType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        Authentication credentials type.
        </summary>
        <value>The type of the authentication credentials.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReuseable">
      <MemberSignature Language="C#" Value="public virtual bool IsReuseable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReuseable" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isReuseable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        Gets a value indicating whether this <see cref="T:MASFoundation.MASAuthCredentials" /> is reuseable.
        </summary>
        <value>
          <c>true</c> if is reuseable; otherwise, <c>false</c>.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
