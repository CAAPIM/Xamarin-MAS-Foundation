<Type Name="MASAuthCredentials" FullName="MASFoundation.MASAuthCredentials">
  <TypeSignature Language="C#" Value="public class MASAuthCredentials : MASFoundation.MASObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MASAuthCredentials extends MASFoundation.MASObject" />
  <AssemblyInfo>
    <AssemblyName>MASFoundation.iOS</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MASFoundation.MASObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MASAuthCredentials", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
    The `MASAuthCredentials` class is a base class of all other auth credentials types supported in MASFoundation SDK.
    </summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASAuthCredentials ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASAuthCredentials (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MASAuthCredentials (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MASAuthCredentials (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the Objective-C class.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
        <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
      </Docs>
    </Member>
<<<<<<< HEAD
=======
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASAuthCredentials (string credentialsType, string csrUsername, bool canRegisterDevice, bool isReusable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string credentialsType, string csrUsername, bool canRegisterDevice, bool isReusable) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCredentialsType:csrUsername:canRegisterDevice:isReusable:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="credentialsType" Type="System.String" />
        <Parameter Name="csrUsername" Type="System.String" />
        <Parameter Name="canRegisterDevice" Type="System.Boolean" />
        <Parameter Name="isReusable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="credentialsType">string value of unique identifier for auth credentials type such as OAuth2 grant type.</param>
        <param name="csrUsername">string value of username registering the device against MAG.</param>
        <param name="canRegisterDevice">bool value indicating whether auth credentials type can be used for device registration against MAG.</param>
        <param name="isReusable">bool value indicating whether auth credentials type can be re-used multiple times.</param>
        <summary>
            Initializes MASAuthCredentials object.
            <para> 
            This initialization method is intended to be used in any extended classes of MASAuthCredentials, and not to be used directly in application's code.
            Arguments on this initialization method are read-only properties along with registerEndpoint and tokenEndpoint.
            </para></summary>
        <remarks>Make sure to initialize custom MASAuthCredentials object within custom MASAuthCredentials' init method.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASAuthCredentials (string credentialsType, string csrUsername, bool canRegisterDevice, bool isReusable, string registerEndpoint, string tokenEndpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string credentialsType, string csrUsername, bool canRegisterDevice, bool isReusable, string registerEndpoint, string tokenEndpoint) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCredentialsType:csrUsername:canRegisterDevice:isReusable:registerEndpoint:tokenEndpoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="credentialsType" Type="System.String" />
        <Parameter Name="csrUsername" Type="System.String" />
        <Parameter Name="canRegisterDevice" Type="System.Boolean" />
        <Parameter Name="isReusable" Type="System.Boolean" />
        <Parameter Name="registerEndpoint" Type="System.String" />
        <Parameter Name="tokenEndpoint" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credentialsType">string value of unique identifier for auth credentials type such as OAuth2 grant type.</param>
        <param name="csrUsername">string value of username registering the device against MAG.</param>
        <param name="canRegisterDevice">bool value indicating whether auth credentials type can be used for device registration against MAG.</param>
        <param name="isReusable">bool value indicating whether auth credentials type can be re-used multiple times.</param>
        <param name="registerEndpoint">string value of MAG device registration endpoint.</param>
        <param name="tokenEndpoint">string value of OTK token endpoint.</param>
        <summary>
            Initializes MASAuthCredentials object.
            <para>
                This initialization method is intended to be used in any extended classes of MASAuthCredentials, and not to be used directly in application's code.
                Arguments on this initialization method are read-only properties.                        
            </para></summary>
        <remarks>Make sure to initialize custom MASAuthCredentials object within custom MASAuthCredentials' init method.</remarks>
      </Docs>
    </Member>
>>>>>>> develop
    <Member MemberName="CanRegisterDevice">
      <MemberSignature Language="C#" Value="public virtual bool CanRegisterDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRegisterDevice" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("canRegisterDevice")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        Gets a value indicating whether this <see cref="T:MASFoundation.MASAuthCredentials" /> can register device.
        </summary>
        <value>
          <c>true</c> if can register device; otherwise, <c>false</c>.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearCredentials">
      <MemberSignature Language="C#" Value="public virtual void ClearCredentials ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearCredentials() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("clearCredentials")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
        Clears the credentials.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CredentialsType">
      <MemberSignature Language="C#" Value="public virtual string CredentialsType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CredentialsType" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
<<<<<<< HEAD
          <AttributeName>get: Foundation.Export("credentialsType")</AttributeName>
=======
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("credentialsType", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
>>>>>>> develop
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        Authentication credentials type.
        </summary>
        <value>The type of the authentication credentials.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
<<<<<<< HEAD
    <Member MemberName="IsReuseable">
      <MemberSignature Language="C#" Value="public virtual bool IsReuseable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReuseable" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isReuseable")</AttributeName>
=======
    <Member MemberName="CsrUsername">
      <MemberSignature Language="C#" Value="public virtual string CsrUsername { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CsrUsername" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("csrUsername", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Internal username value for device registration's generating CSR.</summary>
        <value>csrUsername value should be assigned to username registering the device against MAG during custom MASAuthCredentials object initialization.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary Headers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary Headers" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("getHeaders")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Prepare all required header values for the registration/authentication request</summary>
        <value>NSDictionary of all required headers</value>
        <remarks> 
             Inherited MASAuthCredentials class should override and call parent's getHeaders method in order to customize, or modify header values for following requests
                * device registration (default: "/connect/device/register")
                * session authentication (default: "/auth/oauth/v2/token")
             <para>
             By default, the minimum required header values for each request are:
             </para>
             Device Registration:
                * client-authorization
                * device-id
                * device-name
                * create-session
                * cert-format
             <para> 
             Session Authentication:
                * authorization
             </para>
             The above header values are automatically populated by the Mobile SDK based on the settings of the application. You can override these values in the inherited class but you can cause unexpected behaviour in registration and/or authentication if you fail to coordinate with the server side.  You can also add customize header values in registration and/or authentication as needed.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public virtual bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isReusable")</AttributeName>
>>>>>>> develop
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
<<<<<<< HEAD
        <summary>
        Gets a value indicating whether this <see cref="T:MASFoundation.MASAuthCredentials" /> is reuseable.
        </summary>
        <value>
          <c>true</c> if is reuseable; otherwise, <c>false</c>.</value>
=======
        <summary>Indicates whether this particular auth credentials can be re-used.</summary>
        <value>boolean indicator whether this particular auth credentials can be re-used.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary Parameters" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("getParameters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Prepare all required parameter values for the registration/authentication request</summary>
        <value>NSDictionary of all required parameters</value>
        <remarks>
             Inherited MASAuthCredentials class should override and call parent's getParameters method in order to customize, or modify parameter values for following requests
             * device registration (default: "/connect/device/register")
             * session authentication (default: "/auth/oauth/v2/token")
             <para>
             By default, the minimum required header values for each request are:
             </para>
             Device Registration:
                * certificateSigningRequest
             <para>
             Session Authentication:
                * scope
                * grant_type
             </para>
             The above header values are automatically populated by the Mobile SDK based on the settings of the application. You can override these values in the inherited class but you can cause unexpected behaviour in registration and/or authentication if you fail to coordinate with the server side.  You can also add customize header values in registration and/or authentication as needed.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterEndpoint">
      <MemberSignature Language="C#" Value="public virtual string RegisterEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegisterEndpoint" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("registerEndpoint", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>MAG system endpoint for device registration of current auth credentials type</summary>
        <value>NSString containing the register endpoint.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TokenEndpoint">
      <MemberSignature Language="C#" Value="public virtual string TokenEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TokenEndpoint" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("tokenEndpoint", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>OTK system endpoint for user/client authentication of current auth credentials type.</summary>
        <value>NSString containing the token endpoint.</value>
>>>>>>> develop
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
