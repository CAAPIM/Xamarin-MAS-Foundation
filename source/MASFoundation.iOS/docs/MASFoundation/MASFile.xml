<Type Name="MASFile" FullName="MASFoundation.MASFile">
  <TypeSignature Language="C#" Value="public class MASFile : MASFoundation.MASObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MASFile extends MASFoundation.MASObject" />
  <AssemblyInfo>
    <AssemblyName>MASFoundation.iOS</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MASFoundation.MASObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MASFile", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The `MASFile` class is a local representation of file data.</summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASFile (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MASFile (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MASFile (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contents">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData Contents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSData Contents" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("contents", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectoryType">
      <MemberSignature Language="C#" Value="public virtual MASFoundation.MASFileDirectoryType DirectoryType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MASFoundation.MASFileDirectoryType DirectoryType" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("directoryType", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASFileDirectoryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilePath">
      <MemberSignature Language="C#" Value="public virtual string FilePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilePath" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("filePath")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileWithName">
      <MemberSignature Language="C#" Value="public static MASFoundation.MASFile FileWithName (string name, Foundation.NSData contents);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MASFoundation.MASFile FileWithName(string name, class Foundation.NSData contents) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileWithName:contents:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASFile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="contents" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="name">The NSString name of the new file.</param>
        <param name="contents">The NSData contents of the new file.</param>
        <summary>Creates a new ‘MASFile’ object.
            
            Note, that default directory type is MASFileDirectoryTypeApplicationSupport. If you want to have a file in a specific directory, use fileWithName:contents:directoryType:
            
            Available directory types are:
            
            MASFileDirectoryTypeTemporary MASFileDirectoryTypeApplicationSupport MASFileDirectoryTypeCachesDirectory MASFileDirectoryTypeDocuments MASFileDirectoryTypeLibrary
            
            Data stored into file will be automatically protected with </summary>
        <returns>Returns a new ‘MASFile’ object.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FileWithName">
      <MemberSignature Language="C#" Value="public static MASFoundation.MASFile FileWithName (string name, Foundation.NSData contents, MASFoundation.MASFileDirectoryType directoryType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MASFoundation.MASFile FileWithName(string name, class Foundation.NSData contents, valuetype MASFoundation.MASFileDirectoryType directoryType) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileWithName:contents:directoryType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASFile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="contents" Type="Foundation.NSData" />
        <Parameter Name="directoryType" Type="MASFoundation.MASFileDirectoryType" />
      </Parameters>
      <Docs>
        <param name="name">The NSString name of the new file.</param>
        <param name="contents">The NSData contents of the new file.</param>
        <param name="directoryType">The MASFileDirectoryType enumeration value of directory type.</param>
        <summary>Creates a new ‘MASFile’ object with specified directory type.
            
            Available directory types are:
            
            MASFileDirectoryTypeTemporary MASFileDirectoryTypeApplicationSupport MASFileDirectoryTypeCachesDirectory MASFileDirectoryTypeDocuments MASFileDirectoryTypeLibrary</summary>
        <returns>Returns a new ‘MASFile’ object.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FindFileWithName">
      <MemberSignature Language="C#" Value="public static MASFoundation.MASFile FindFileWithName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MASFoundation.MASFile FindFileWithName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("findFileWithName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASFile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the file</param>
        <summary>Find a specific, MASFile in local storage if it exists.
            
            Note, that file is retrieved from Application Support directory in the application directory by default. If you want to find a file to a specific directory, use findFileWithName:directoryType:
            
            Available directory types are:
            
            MASFileDirectoryTypeTemporary MASFileDirectoryTypeApplicationSupport MASFileDirectoryTypeCachesDirectory MASFileDirectoryTypeDocuments MASFileDirectoryTypeLibrary</summary>
        <returns>Returns the MASFile that applies to the name, nil if none.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="FindFileWithName">
      <MemberSignature Language="C#" Value="public static MASFoundation.MASFile FindFileWithName (string name, MASFoundation.MASFileDirectoryType directoryType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MASFoundation.MASFile FindFileWithName(string name, valuetype MASFoundation.MASFileDirectoryType directoryType) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("findFileWithName:directoryType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASFile</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="directoryType" Type="MASFoundation.MASFileDirectoryType" />
      </Parameters>
      <Docs>
        <param name="name">The name of the file</param>
        <param name="directoryType">The directory type of the file</param>
        <summary>Find a specific, MASFile in local storage from specified directory if it exists.
            
            Available directory types are:
            
            MASFileDirectoryTypeTemporary MASFileDirectoryTypeApplicationSupport MASFileDirectoryTypeCachesDirectory MASFileDirectoryTypeDocuments MASFileDirectoryTypeLibrary</summary>
        <returns>Returns the MASFile that applies to the name, nil if none.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("name")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the file.</summary>
        <value>name</value>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual bool Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("remove")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes the MASFile locally.</summary>
        <returns>Returns YES if success or NO if failure.</returns>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveItemAtFilePath">
      <MemberSignature Language="C#" Value="public static bool RemoveItemAtFilePath (string filePath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RemoveItemAtFilePath(string filePath) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeItemAtFilePath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filePath">The file path to find the data to remove.</param>
        <summary>Remove any data at the given file path.</summary>
        <returns>Returns YES if removed, NO if not.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual bool Save ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Save() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("save")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
          <summary>Save the MASFile locally.
              
              By default, NSDataWritingOptions is set to NSDataWritingFileProtectionComplete.</summary>
        <returns>Returns YES if success or NO if failure.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveWithDataWritingOption">
      <MemberSignature Language="C#" Value="public virtual bool SaveWithDataWritingOption (Foundation.NSDataWritingOptions option);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SaveWithDataWritingOption(valuetype Foundation.NSDataWritingOptions option) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("saveWithDataWritingOption:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="option" Type="Foundation.NSDataWritingOptions" />
      </Parameters>
      <Docs>
        <param name="option">NSDataWritingOptions option</param>
        <summary>Save the MASFile locally with NSDataWritingOptions option.
            
            This method saves the file into iOS file system with provided NSDataWritingOptions.</summary>
        <returns>Returns YES if success or NO if failure.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreTemporaryItem">
      <MemberSignature Language="C#" Value="public static string StoreTemporaryItem (Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string StoreTemporaryItem(class Foundation.NSData data) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("storeTemporaryItem:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="data">The NSData item to store.</param>
        <summary>Stores the given NSData at a temporary location.
            
            Temporary items are saved with NSDataWritingFileProtectionNone.</summary>
        <returns>Returns the NSString file path where it is stored.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
