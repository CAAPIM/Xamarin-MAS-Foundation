<Type Name="MASObject" FullName="MASFoundation.MASObject">
  <TypeSignature Language="C#" Value="public class MASObject : Foundation.NSObject, Foundation.INSCoding, Foundation.INSCopying, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MASObject extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSCopying, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>MASFoundation.iOS</AssemblyName>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MASObject", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
    The `MASObject` class is a local representation of data persisted to the MAS cloud. This is the main class that is used to interact with objects in your app.
    </summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASObject (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MASObject (Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSString&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSString&gt; attributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithAttributes:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attributes" Type="Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSString&gt;" />
      </Parameters>
      <Docs>
        <param name="attributes">NSDictionary to be used as attributes</param>
        <summary>
        Init the object with passed attributes in a form of NSDictionary
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MASObject (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MASObject (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the Objective-C class.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
        <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="_attributes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSMutableDictionary&lt;Foundation.NSString,Foundation.NSString&gt; _attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSMutableDictionary`2&lt;class Foundation.NSString, class Foundation.NSString&gt; _attributes" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("_attributes", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSMutableDictionary&lt;Foundation.NSString,Foundation.NSString&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        List of attributes of the object.
        </summary>
        <value>The attributes.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassName">
      <MemberSignature Language="C#" Value="public virtual string ClassName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ClassName" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("className")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        The class name of the object.
        </summary>
        <value>The name of the class.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it. It does not actually try to replicate any managed state.</returns>
        <remarks>
            Implementation of the INSCopyable interface.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
            This method is part of the Foundation.NSCoding protocol and is used by applications to preserve the state of the object into an archive.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListAttributes">
      <MemberSignature Language="C#" Value="public virtual void ListAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ListAttributes() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("listAttributes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            List all attributes from the Object.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectForKey">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject ObjectForKey (Foundation.NSObject key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject ObjectForKey(class Foundation.NSObject key) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("objectForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="key">The given identifying key for which to return the corresponding value.</param>
        <summary>
            Returns the value associated with a given key.
        </summary>
        <returns>The value associated with a given key.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectForKeyedSubscript">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject ObjectForKeyedSubscript (Foundation.NSObject key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject ObjectForKeyedSubscript(class Foundation.NSObject key) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("objectForKeyedSubscript:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="key">The key for which to return the corresponding value.</param>
        <summary>
            Returns the value associated with a given key.
        </summary>
        <returns>The value associated with a given key.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectId">
      <MemberSignature Language="C#" Value="public virtual string ObjectId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ObjectId" />
      <MemberType>Property</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("objectId")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        The id of the object.
        </summary>
        <value>The object identifier.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectWithClassName">
      <MemberSignature Language="C#" Value="public static MASFoundation.MASObject ObjectWithClassName (string className);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MASFoundation.MASObject ObjectWithClassName(string className) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("objectWithClassName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="className">A class name can be any alphanumeric string that begins with a letter. It represents an object in your app, like a 'User' or a 'Document'.</param>
        <summary>
        Creates a new MASObject with a class name
        </summary>
        <returns>MASObject that is instantiated with the given class name.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectWithClassName">
      <MemberSignature Language="C#" Value="public static MASFoundation.MASObject ObjectWithClassName (string className, Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSString&gt; dictionary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MASFoundation.MASObject ObjectWithClassName(string className, class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSString&gt; dictionary) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("objectWithClassName:withData:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MASFoundation.MASObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="className" Type="System.String" />
        <Parameter Name="dictionary" Type="Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSString&gt;" />
      </Parameters>
      <Docs>
        <param name="className">A class name can be any alphanumeric string that begins with a letter. It represents an object in your app, like a 'User' or a 'Document'.</param>
        <param name="dictionary">A disctionary that will be used as a data.</param>
        <summary>
        Creates a new MASObject with a class name and a dictionary as the data
        </summary>
        <returns>MASObject that is instantiated with the given class name and dictionary.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetObjectForKey">
      <MemberSignature Language="C#" Value="public virtual void SetObjectForKey (Foundation.NSObject object, Foundation.NSCopying key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObjectForKey(class Foundation.NSObject object, class Foundation.NSCopying key) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setObject:forKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="object" Type="Foundation.NSObject" />
        <Parameter Name="key" Type="Foundation.NSCopying" />
      </Parameters>
      <Docs>
        <param name="object">The object for `key`. A strong reference to the object is maintaned by MASObject. Raises an `NSInvalidArgumentException` if `object` is `null`. If you need to represent a `null` value - use `NSNull`.</param>
        <param name="key">The key for `object`. Raises an `NSInvalidArgumentException` if `key` is `null`.</param>
        <summary>
        Sets the object associated with a given key.
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetObjectForKeyedSubscript">
      <MemberSignature Language="C#" Value="public virtual void SetObjectForKeyedSubscript (Foundation.NSObject object, Foundation.NSCopying key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObjectForKeyedSubscript(class Foundation.NSObject object, class Foundation.NSCopying key) cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setObject:forKeyedSubscript:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="object" Type="Foundation.NSObject" />
        <Parameter Name="key" Type="Foundation.NSCopying" />
      </Parameters>
      <Docs>
        <param name="object">The object for `key`. A strong reference to the object is maintaned by PFObject. Raises an `NSInvalidArgumentException` if `object` is `null`. If you need to represent a `null` value - use `NSNull`.</param>
        <param name="key">The key for `object`. Raises an `NSInvalidArgumentException` if `key` is `null`.</param>
        <summary>
        Returns the value associated with a given key.
        <para>This method enables usage of literal syntax on `MASObject`. E.g. `object["key"] = "value";`</para></summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
