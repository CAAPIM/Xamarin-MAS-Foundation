<doc>
    <assembly>
        <name>MASFoundation.iOS</name>
    </assembly>
    <members>
        <member name="T:MASFoundation.Constants">
            <summary>Contains all string constants and notifications available in the SDK.</summary>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASDeviceDidDeregisterNotification">
            <summary>The NSString constant for the device notification indicating that the MASDevice has been successfully deregistered.</summary>
            <value>MASDeviceDidDeregisterNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASDeviceDidFailToDeregisterNotification">
            <summary>The NSString constant for the device notification indicating that the MASDevice has failed deregister.</summary>
            <value>MASDeviceDidFailToDeregisterNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASDeviceDidResetLocallyNotification">
            <summary>The NSString constant for the device notification indicating that the MASDevice has reset locally.</summary>
            <value>MASDeviceDidResetLocallyNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASDeviceWillDeregisterNotification">
            <summary>The NSString constant for the device notification indicating that the MASDevice has begun the process of deregistering the device.</summary>
            <value>MASDeviceWillDeregisterNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASDidFailToStartNotification">
            <summary>The NSString constant for the MAS notification indicating that MAS has failed to successfully start it's processes.</summary>
            <value>MASDidFailToStartNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASDidFailToStopNotification">
            <summary>The NSString constant for the MAS notification indicating that MAS has failed to successfully stop it's processes.</summary>
            <value>MASDidFailToStopNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASDidStartNotification">
            <summary>The NSString constant for the MAS notification indicating that MAS has successfully started it's processes.</summary>
            <value>MASDidStartNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASDidStopNotification">
            <summary>The NSString constant for the MAS notification indicating that MAS has successfully stopped it's processes.</summary>
            <value>MASDidStopNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASDidSwitchGatewayServerNotification">
            <summary>TThe NSString constant for the MAS notification indicating that MAS did finish to switch the server.</summary>
            <value>MASDidSwitchGatewayServerNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASFoundationErrorDomain">
            <summary>The NSString error domain used by all MAS server related Foundation level NSErrors.</summary>
            <value>"com.ca.MASFoundation:ErrorDomain</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASFoundationErrorDomainLocal">
            <summary>The NSString error domain used by all MAS local level NSErrors.</summary>
            <value>com.ca.MASFoundation.localError:ErrorDomain</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASFoundationErrorDomainTargetAPI">
            <summary>The NSString error domain used by all target API level NSErrors.</summary>
            <value>com.ca.MASFoundation.targetAPI:ErrorDomain</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASFoundationVersionNumber">
            <summary>Project version number for MASFoundation.</summary>
            <value>MASFoundation version number.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASFoundationVersionString">
            <summary>Project version string for MASFoundation.</summary>
            <value>MASFoundation version string.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASGatewayMonitorStatusUpdateNotification">
            <summary>The NSString constant for the gateway monitor notification indicating that the monitor status has updated to a new value.</summary>
            <value>MASGatewayMonitorStatusUpdateNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASUserDidAuthenticateNotification">
            <summary>The NSString constant for the user notification indicating that a MASUser has successfully authenticated.</summary>
            <value>MASUserDidAuthenticateNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASUserDidFailToAuthenticateNotification">
            <summary>The NSString constant for the user notification indicating that a MASUser has failed to authenticate.</summary>
            <value>MASUserDidFailToAuthenticateNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASUserDidFailToLogoutNotification">
            <summary>The NSString constant for the user notification indicating that a MASUser has failed to log out.</summary>
            <value>MASUserDidFailToLogoutNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASUserDidFailToUpdateInformationNotification">
            <summary>The NSString constant for the user notification indicating that a MASUser has failed to update it's user information.</summary>
            <value>MASUserDidFailToUpdateInformationNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASUserDidLogoutNotification">
            <summary>The NSString constant for the user notification indicating that a MASUser has successfully logged out.</summary>
            <value>MASUserDidLogoutNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASUserDidUpdateInformationNotification">
            <summary>The NSString constant for the user notification indicating that a MASUser has successfully updated it's information.</summary>
            <value>MASUserDidUpdateInformationNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASUserWillAuthenticateNotification">
            <summary>The NSString constant for the user notification indicating that a MASUser will attempt to authenticate.</summary>
            <value>MASUserWillAuthenticateNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASUserWillLogoutNotification">
            <summary>The NSString constant for the user notification indicating that a MASUser will attempt to log out.</summary>
            <value>MASUserWillLogoutNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASUserWillUpdateInformationNotification">
            <summary>The NSString constant for the user notification indicating that a MASUser will attempt to update it's information.</summary>
            <value>MASUserWillUpdateInformationNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASWillStartNotification">
            <summary>The NSString constant for the MAS notification indicating that MAS has begun starting all it's processes.</summary>
            <value>MASWillStartNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASWillStopNotification">
            <summary>The NSString constant for the MAS notification indicating that MAS has begun stopping all it's processes.</summary>
            <value>MASWillStopNotification.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.Constants.MASWillSwitchGatewayServerNotification">
            <summary>The NSString constant for the MAS notification indicating that MAS will switch the server.</summary>
            <value>MASWillSwitchGatewayServerNotification.</value>
            <remarks />
        </member>
        <member name="T:MASFoundation.MAS">
            <summary>
        The top level MAS object represents the Mobile App Services SDK in it's entirety.  
        It is where the framework lifecycle begins, and ends if necessary. It is the front
        facing class where many of the configuration settings for the SDK as a whole can be
        found and utilized.
    </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MAS">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MAS(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MAS(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MAS.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="M:MASFoundation.MAS.DeleteFrom(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP DELETE call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para><para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use MAS.DeleteFrom(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
            </para>
            This version defaults the request/response content type encoding to JSON.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.DeleteFrom(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP DELETE call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para><para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use MAS.DeleteFrom(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </para></summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.DeleteFrom(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,System.Boolean,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="isPublic">Boolean value whether the request is being made outside of primary gateway. When the value is set to true, all automatically injected credentials in SDK will be excluded in the request.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP DELETE call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para><para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use DeleteFrom(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
            </para></summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.DeleteFromAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <summary>
            Request method for an HTTP DELETE call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para><para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use DeleteFrom(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
            </para></summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.DeleteFromAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <summary>
            Request method for an HTTP DELETE call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para><para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use DeleteFrom(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
            </para></summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.DeleteFromAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,System.Boolean)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="isPublic">Boolean value whether the request is being made outside of primary gateway. When the value is set to true, all automatically injected credentials in SDK will be excluded in the request.</param>
            <summary>
            Request method for an HTTP DELETE call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para><para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use DeleteFrom(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
            </para></summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MAS.GatewayIsReachable">
            <summary>
        Retrieves a simple boolean indicator if the gateway is currently reachable or not.
        </summary>
            <value>
                <c>true</c> if gateway is reachable; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MAS.GatewayMonitoringStatusAsString">
            <summary>
        Retrieves the current gateway monitoring status of the Gateway connection.
        </summary>
            <value>The gateway monitoring status as string.</value>
            <remarks>
        The monitoring status enumerated values to their string equivalents are:
        
        MASGatewayMonitoringStatus.NotReachable
        MASGatewayMonitoringStatus.ReachableViaWWAN
        MASGatewayMonitoringStatus.ReachableViaWiFi
        </remarks>
        </member>
        <member name="M:MASFoundation.MAS.GetFrom(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
        Request method for an HTTP GET call to the Gateway.  This type of HTTP Method type
        places it's parameters within the NSURL itself as an HTTP query extension as so:
        <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
        If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
        provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
        </para><para>
        ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
        subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
        </para><para>
        When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
        </para><para>
        If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
        to the primary gateway or not.  To ensure bypass the user session validation for public API, use GetFrom(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
        with isPublic being <c>true</c>.
        </para>
        This version defaults the request/response content type encoding to JSON.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.GetFrom(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
        Request method for an HTTP GET call to the Gateway.  This type of HTTP Method type
        places it's parameters within the NSURL itself as an HTTP query extension as so:
        <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
        If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
        provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
        </para><para>
        ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
        subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
        </para><para>
        When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
        </para>
        If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
        to the primary gateway or not.  To ensure bypass the user session validation for public API, use GetFrom(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
        with isPublic being <c>true</c>.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.GetFrom(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,System.Boolean,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="isPublic">Boolean value whether the request is being made outside of primary gateway. When the value is set to true, all automatically injected credentials in SDK will be excluded in the request.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP GET call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use GetFrom(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.GetFromAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <summary>
            Request method for an HTTP GET call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use GetFrom(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.GetFromAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <summary>
            Request method for an HTTP GET call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use GetFrom(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.GetFromAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,System.Boolean)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="isPublic">Boolean value whether the request is being made outside of primary gateway. When the value is set to true, all automatically injected credentials in SDK will be excluded in the request.</param>
            <summary>
            Request method for an HTTP GET call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use GetFrom(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MAS.GrantFlow">
            <summary>
        MASGrantFlow property.  The default is MASGrantFlow.ClientCredentials.
        </summary>
            <value>The grant flow of the MAG SDK.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.Invoke(MASFoundation.MASRequest,MASFoundation.MASResponseObjectErrorBlock)">
            <param name="request">MASRequest An object containing all parameters to call the endpoint When the value is set to true, all automatically injected credentials in the SDK will be excluded in the request.</param>
            <param name="completion">An MASResponseObjectErrorBlock (NSHttpUrlResponse response, NSObject responseObject, NSError error) that will receive any type of response object or an NSError object if there is a failure.</param>
            <summary>
            Invoke the endpoint with the parameters defined in the MASRequest object
            <para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.      
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.InvokeAsync(MASFoundation.MASRequest)">
            <param name="request">MASRequest An object containing all parameters to call the endpoint When the value is set to true, all automatically injected credentials in the SDK will be excluded in the request.</param>
            <summary>
            Invoke the endpoint with the parameters defined in the MASRequest object
            <para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.      
        </summary>
            <returns>MASResponseObjectErrorResult object that contains the NSHTTPURLResponse object and response object which needs to perform type casting based on the object type.</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MAS.IsKeychainSynchronizable">
            <summary>
        Gets a value indicating whether this <see cref="T:MASFoundation.MAS" /> is keychain synchronizable.
        </summary>
            <value>
                <c>true</c> if is keychain synchronizable; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MAS.MASState">
            <summary>
        Returns current MASState enumeration value.  The value can be used to determine which state SDK is currently at.
        </summary>
            <value>MASState of current state.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PatchTo(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP PATCH call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para><para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PatchTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
            </para>
            This version defaults the request/response content type encoding to JSON.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PatchTo(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP PATCH call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PatchTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PatchTo(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,System.Boolean,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="isPublic">Boolean value whether the request is being made outside of primary gateway. When the value is set to true, all automatically injected credentials in SDK will be excluded in the request.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP PATCH call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PatchTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PatchToAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <summary>
            Request method for an HTTP PATCH call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PatchTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PatchToAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <summary>
            Request method for an HTTP PATCH call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PatchTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PatchToAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,System.Boolean)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="isPublic">Boolean value whether the request is being made outside of primary gateway. When the value is set to true, all automatically injected credentials in SDK will be excluded in the request.</param>
            <summary>
            Request method for an HTTP PATCH call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PatchTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PostTo(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP POST call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para><para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PostTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
            </para>
            This version defaults the request/response content type encoding to JSON.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PostTo(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP POST call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PostTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PostTo(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,System.Boolean,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="isPublic">Boolean value whether the request is being made outside of primary gateway. When the value is set to true, all automatically injected credentials in SDK will be excluded in the request.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP PATCH call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PostTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PostToAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <summary>
            Request method for an HTTP PATCH call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PostTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PostToAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <summary>
            Request method for an HTTP PATCH call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PostTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PostToAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,System.Boolean)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="isPublic">Boolean value whether the request is being made outside of primary gateway. When the value is set to true, all automatically injected credentials in SDK will be excluded in the request.</param>
            <summary>
            Request method for an HTTP PATCH call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PostTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PutTo(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP PUT call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para><para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PutTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
            </para>
            This version defaults the request/response content type encoding to JSON.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PutTo(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP PUT call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PutTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PutTo(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,System.Boolean,MASFoundation.MASResponseInfoErrorBlock)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="isPublic">Boolean value whether the request is being made outside of primary gateway. When the value is set to true, all automatically injected credentials in SDK will be excluded in the request.</param>
            <param name="completion">An MASResponseInfoErrorBlock (NSDictionary responseInfo, NSError error) that will receive the JSON response object or an NSError object if there is a failure.</param>
            <summary>
            Request method for an HTTP PUT call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PutTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PutToAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <summary>
            Request method for an HTTP PUT call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PutTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PutToAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <summary>
            Request method for an HTTP PUT call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PutTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.PutToAsync(System.String,Foundation.NSDictionary,Foundation.NSDictionary,MASFoundation.MASRequestResponseType,MASFoundation.MASRequestResponseType,System.Boolean)">
            <param name="endPointPath">The specific end point path fragment NSString to append to the base
        Gateway URL.endPointPath value can also be defined as full URL format; in this case, the SDK must be configured to perform SSL pinning with public key hashes
        which can be configured in JSON configuration.</param>
            <param name="parameterInfo">An NSDictionary of key/value parameter values that will go into the query portion of the URL.</param>
            <param name="headerInfo">An NSDictionary of key/value header values that will go into the HTTP header.</param>
            <param name="requestType">The mime type content encoding expected for the parameter encoding.</param>
            <param name="responseType">The mime type expected in the body of the response.</param>
            <param name="isPublic">Boolean value whether the request is being made outside of primary gateway. When the value is set to true, all automatically injected credentials in SDK will be excluded in the request.</param>
            <summary>
            Request method for an HTTP PUT call to the Gateway.  This type of HTTP Method type
            places it's parameters within the NSURL itself as an HTTP query extension as so:
            <para><![CDATA[ https://<hostname>:<port>/<endPointPath><?type=value&type2=value2&...>]]></para><para>
            If endPointPath is full URL format(including port number and http protocol), the SDK will validate the server from the client side through SSL pinning(authentication challenge) with
            provided subjectKeyHash(also known as public key hash) in configuration in mag.mobile_sdk.trusted_cert_pinned_public_key_hashes and mag.mobile_sdk.enable_public_key_pinning.
            </para><para>
            ALL of servers' public key hashes in certificate chain must be defined in the list.  This means when it is configured to use public key hash pinning for SSL pinning,
            subjectKeyHash(public key hash) of the gateway must be also present within the list.The list can contain multiple hash values in array for multiple servers.
            </para><para>
            When the SDK fails to validate SSL with certificate or subjectKeyHash pinning for communication to HTTPs, the SDK will cancel the request.
            </para>
            If endPointPath is full URL format, upon successful SSL pinning validation, the SDK will also validate the user session against primary gateway regardless the request is being made
            to the primary gateway or not.  To ensure bypass the user session validation for public API, use PutTo(string endPointPath, [NullAllowed] NSDictionary parameterInfo, [NullAllowed] NSDictionary headerInfo, MASRequestResponseType requestType, MASRequestResponseType responseType, bool isPublic, [NullAllowed] MASResponseInfoErrorBlock completion) method
            with isPublic being <c>true</c>.
        </summary>
            <returns><![CDATA[<NSDictionary<NSString, NSObject>>, response object of any type of object. It is most often used to return NSString JSON responses from HTTP calls.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.SetConfigurationFileName(System.String)">
            <param name="fileName">The NSString name of the configuration file.</param>
            <summary>
        Set the name of the configuration file.  This gives the ability to set the file's name to a custom value.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.SetGatewayMonitor(MASFoundation.MASGatewayMonitorStatusBlock)">
            <param name="monitor">The MASGatewayMonitorStatusBlock that will receive the status updates.</param>
            <summary>
        Sets the gateway monitoring block defined by the GatewayMonitorStatusBlock type.
        This block will be triggered when any change to the current monitoring status
        takes place with a MASGatewayMonitoringStatus.
        <para>
        This is optional and it can be set to null at any time to stop receiving the notifications.
        </para></summary>
            <remarks>
        The gateway monitoring status enumerated values are:
        MASGatewayMonitoringStatus.NotReachable
        MASGatewayMonitoringStatus.ReachableViaWWAN
        MASGatewayMonitoringStatus.ReachableViaWiFi
        </remarks>
        </member>
        <member name="M:MASFoundation.MAS.SetGatewayNetworkActivityLogging(System.Boolean)">
            <param name="enabled">If set to <c>true</c> enabled.</param>
            <summary>
        Turn on or off the logging of the network activity with the Gateway.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.SetKeychainSynchronizable(System.Boolean)">
            <param name="enabled">If set to <c>true</c> enabled.</param>
            <summary>
        Sets bool indicator whether the Keychain is synchronized through iCloud.
        By default, the Keychain is not synchronized through iCloud.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.SetUserAuthCredentials(MASFoundation.MASUserAuthCredentialsBlock)">
            <param name="userAuthCredentialsBlock">MASUserAuthCredentialsBlock that contains callback block to be invoked with MASAuthCredentials.</param>
            <summary>
        Set a user auth credential block to handle the case where the SDK requires auth credentials.
        <para>When MASGrantFlow is set to MASGrantFlowPassword, and auth credentials is required, the SDK will invoke this block
        to obtain MASAuthCredentials to proceed authentication process.</para></summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.Start(MASFoundation.MASCompletionErrorBlock)">
            <param name="completion">An MASCompletionErrorBlock type (bool completed, NSError error) that will
        receive a <c>true</c> or <c>false</c> bool indicating the completion state and/or an NSError object if there
        is a failure.
        </param>
            <summary>
            Starts the lifecycle of the MAS processes.  
            <para>
            Although an asynchronous block callback parameter is provided for response usage,
            optionally you can set that to null and the caller can observe the lifecycle 
            notifications instead.
            </para><para>
            This will load the last used JSON configuration from keychain storage.If there was none,
            it will load from default JSON configuration file (msso_config.json)
            or JSON file with file name set through[MAS setConfigurationFileName:].
            </para>
             The MAS lifecycle notifications are:
            
             *      MASWillStartNotification
             *      MASDidFailToStartNotification
             *      MASDidStartNotification
            
            The application registration notifications are:
            
             *      MASApplicationWillRegisterNotification
             *      MASApplicationDidFailToRegisterNotification
             *      MASApplicationDidRegisterNotification
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.StartAsync">
            <summary>
            Starts the lifecycle of the MAS processes.  
            <para>
            Although an asynchronous block callback parameter is provided for response usage,
            optionally you can set that to null and the caller can observe the lifecycle 
            notifications instead.
            </para><para>
            This will load the last used JSON configuration from keychain storage.If there was none,
            it will load from default JSON configuration file (msso_config.json)
            or JSON file with file name set through[MAS setConfigurationFileName:].
            </para>
             The MAS lifecycle notifications are:
            
             *      MASWillStartNotification
             *      MASDidFailToStartNotification
             *      MASDidStartNotification
            
            The application registration notifications are:
            
             *      MASApplicationWillRegisterNotification
             *      MASApplicationDidFailToRegisterNotification
             *      MASApplicationDidRegisterNotification
        </summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.StartWithDefaultConfiguration(System.Boolean,MASFoundation.MASCompletionErrorBlock)">
            <param name="shouldUseDefault">Boolean value of using default configuration rather than the one in keychain storage.</param>
            <param name="completion">An MASCompletionErrorBlock type (bool completed, NSError error) that will
        receive a <c>true</c> or <c>false</c> bool indicating the completion state and/or an NSError object if there
        is a failure.
        </param>
            <summary>
            Starts the lifecycle of the MAS processes.
            <para>
            Although an asynchronous block callback parameter is provided for response usage,
            optionally you can set that to null and the caller can observe the lifecycle
            notifications instead.
            </para><para>
            This will load the default JSON configuration rather than from keychain storage; if the SDK was already initialized, this method will fully stop and re-start the SDK.
            The default JSON configuration file should be msso_config.json or file name defined through MAS.SetConfigurationFileName().
            This will ignore the JSON configuration in keychain storage and replace with the default configuration.
            </para>
             The MAS lifecycle notifications are:
            
             *      MASWillStartNotification
             *      MASDidFailToStartNotification
             *      MASDidStartNotification
            
            The application registration notifications are:
            
             *      MASApplicationWillRegisterNotification
             *      MASApplicationDidFailToRegisterNotification
             *      MASApplicationDidRegisterNotification
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.StartWithDefaultConfigurationAsync(System.Boolean)">
            <param name="shouldUseDefault">Boolean value of using default configuration rather than the one in keychain storage.</param>
            <summary>
            Starts the lifecycle of the MAS processes.
            <para>
            Although an asynchronous block callback parameter is provided for response usage,
            optionally you can set that to null and the caller can observe the lifecycle
            notifications instead.
            </para><para>
            This will load the default JSON configuration rather than from keychain storage; if the SDK was already initialized, this method will fully stop and re-start the SDK.
            The default JSON configuration file should be msso_config.json or file name defined through MAS.SetConfigurationFileName().
            This will ignore the JSON configuration in keychain storage and replace with the default configuration.
            </para>
             The MAS lifecycle notifications are:
            
             *      MASWillStartNotification
             *      MASDidFailToStartNotification
             *      MASDidStartNotification
            
            The application registration notifications are:
            
             *      MASApplicationWillRegisterNotification
             *      MASApplicationDidFailToRegisterNotification
             *      MASApplicationDidRegisterNotification            
        </summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.StartWithJSON(Foundation.NSDictionary,MASFoundation.MASCompletionErrorBlock)">
            <param name="jsonConfiguration">NSDictionary of JSON configuration object.</param>
            <param name="completion">An MASCompletionErrorBlock type (bool completed, NSError error) that will
        receive a <c>true</c> or <c>false</c> bool indicating the completion state and/or an NSError object if there
        is a failure.</param>
            <summary>
            Starts the lifecycle of the MAS processes with given JSON configuration data.
            This method will overwrite JSON configuration(if they are different) that was stored in keychain.
            <para>
            Although an asynchronous block callback parameter is provided for response usage,
            optionally you can set that to null and the caller can observe the lifecycle
            </para>
            The MAS lifecycle notifications are:
            
             *      MASWillStartNotification
             *      MASDidFailToStartNotification
             *      MASDidStartNotification
            
            The application registration notifications are:
            
             *      MASApplicationWillRegisterNotification
             *      MASApplicationDidFailToRegisterNotification
             *      MASApplicationDidRegisterNotification            
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.StartWithJSONAsync(Foundation.NSDictionary)">
            <param name="jsonConfiguration">NSDictionary of JSON configuration object.</param>
            <summary>
            Starts the lifecycle of the MAS processes with given JSON configuration data.
            This method will overwrite JSON configuration(if they are different) that was stored in keychain.
            <para>
            Although an asynchronous block callback parameter is provided for response usage,
            optionally you can set that to null and the caller can observe the lifecycle
            </para>
            The MAS lifecycle notifications are:
            
             *      MASWillStartNotification
             *      MASDidFailToStartNotification
             *      MASDidStartNotification
            
            The application registration notifications are:
            
             *      MASApplicationWillRegisterNotification
             *      MASApplicationDidFailToRegisterNotification
             *      MASApplicationDidRegisterNotification            
        </summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.StartWithURL(Foundation.NSUrl,MASFoundation.MASCompletionErrorBlock)">
            <param name="url">NSURL of JSON configuration file path or enrollment URL.</param>
            <param name="completion">An MASCompletionErrorBlock type (bool completed, NSError *error) that will receive a <c>true</c> or <c>false</c> bool indicating the completion state and/or an NSError object if there is a failure.</param>
            <summary>
            Starts the lifecycle of the MAS processes with given JSON configuration file path, enrollment URL or null.
            This method will overwrite JSON configuration(if they are different) that was stored in keychain when configuration file path or enrollment URL is provided.
            <para>
            When URL is recognized as null, this method will initialize the SDK by using last used JSON configuration that is stored in keychain storage,
            or load JSON configuration from defined default configuration file name.
            </para><para>
            Enrollment URL is an URL from gateway containing some of credentials required to establish secure connection.
            </para>
            The gateway must be configured to generate and handle enrollment process with client side SDK.
            The enrollment URL can be retrieved in many ways which has to be configured properly along with the gateway in regards of the enrollment process.
            <para>
            MASFoundation SDK does not request, or retrieve the enrollment URL by itself.
            </para>
            Although an asynchronous block callback parameter is provided for response usage,
            optionally you can set that to null and the caller can observe the lifecycle
            <para>
            The MAS lifecycle notifications are:
            
            *      MASWillStartNotification
            *      MASDidFailToStartNotification
            *      MASDidStartNotification
            
            The application registration notifications are:
            
            *      MASApplicationWillRegisterNotification
            *      MASApplicationDidFailToRegisterNotification
            *      MASApplicationDidRegisterNotification                        
            </para></summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.StartWithURLAsync(Foundation.NSUrl)">
            <param name="url">NSURL of JSON configuration file path or enrollment URL.</param>
            <summary>
            Starts the lifecycle of the MAS processes with given JSON configuration file path, enrollment URL or null.
            This method will overwrite JSON configuration(if they are different) that was stored in keychain when configuration file path or enrollment URL is provided.
            <para>
            When URL is recognized as null, this method will initialize SDK by using last used JSON configuration that is stored in keychain storage,
            or load JSON configuration from defined default configuration file name.
            </para><para>
            Enrollment URL is an URL from gateway containing some of credentials required to establish secure connection.
            </para>
            The gateway must be configured to generate and handle enrollment process with client side SDK.
            The enrollment URL can be retrieved in many ways which has to be configured properly along with the gateway in regards of the enrollment process.
            <para>
            MASFoundation SDK does not request, or retrieve the enrollment URL by itself.
            </para>
            Although an asynchronous block callback parameter is provided for response usage,
            optionally you can set that to null and the caller can observe the lifecycle
            <para>
            The MAS lifecycle notifications are:
            
            *      MASWillStartNotification
            *      MASDidFailToStartNotification
            *      MASDidStartNotification
            
            The application registration notifications are:
            
            *      MASApplicationWillRegisterNotification
            *      MASApplicationDidFailToRegisterNotification
            *      MASApplicationDidRegisterNotification                        
            </para></summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.Stop(MASFoundation.MASCompletionErrorBlock)">
            <param name="completion">An MASCompletionErrorBlock type (bool completed, NSError error) that will
        receive a <c>true</c> or <c>false</c> bool indicating the completion state and/or an NSError object if there
        is a failure.
        </param>
            <summary>
            Stops the lifecycle of all MAS processes.
            <para>
            Although an asynchronous block callback parameter is provided for response usage,
            optionally you can set that to null and the caller can observe the lifecycle 
            notifications instead.
            </para>
            The lifecycle notifications are:
            
            *      MASWillStopNotification
            *      MASDidFailToStopNotification
            *      MASDidStopNotification            
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MAS.StopAsync">
            <summary>
            Stops the lifecycle of all MAS processes.
            <para>
            Although an asynchronous block callback parameter is provided for response usage,
            optionally you can set that to null and the caller can observe the lifecycle 
            notifications instead.
            </para>
            The lifecycle notifications are:
            
            *      MASWillStopNotification
            *      MASDidFailToStopNotification
            *      MASDidStopNotification            
        </summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASApplication">
            <summary>
    The `MASApplication` class is a local representation of application data.
    </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASApplication">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASApplication(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASApplication(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASApplication(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASApplication.AuthenticationStatus">
            <summary>
        Gets the authentication status.
        </summary>
            <value>The authentication status.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASApplication.CurrentApplication">
            <summary>
        Gets the current application as in singleton MASApplication object.
        </summary>
            <value>The current application as in singleton MASApplication object.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.DetailedDescription">
            <summary>
        Gets the detailed description of the application.
        </summary>
            <value>The detailed description of the application.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASApplication.Dispose(System.Boolean)">
            <param name="disposing">If set to <c>true</c>, the method is invoked directly and will dispose manage and unmanaged resources; If set to <c>false</c> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</param>
            <summary>Releases the resources used by the MASApplication object.</summary>
            <remarks>
            This method is called by both the Dispose() method and the object finalizer (Finalize). When invoked by the Dispose method, the parameter disposing disposing is set to true and any managed object references that this object holds are also disposed or released; when invoked by the object finalizer, on the finalizer thread the value is set to false.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASApplication.Environment">
            <summary>
            Gets the environment of the application.
        </summary>
            <value>The environment of the application.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.Identifier">
            <summary>
        Gets the application identifier.
        </summary>
            <value>The application identifier.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.IsAuthenticated">
            <summary>
            Gets a value indicating whether this <see cref="T:MASFoundation.MASApplication" /> is authenticated.
        </summary>
            <value>
                <c>true</c> if is authenticated; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.IsRegistered">
            <summary>
            Gets a value indicating whether this <see cref="T:MASFoundation.MASApplication" /> is registered.
        </summary>
            <value>
                <c>true</c> if is registered; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.Name">
            <summary>
        Gets the name of the application.
        </summary>
            <value>The name of the application.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.Organization">
            <summary>
        Gets the organization of the application.
        </summary>
            <value>The organization of the application.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.RedirectUri">
            <summary>
        Gets the redirect URI of the application.
        </summary>
            <value>The redirect URI of the application.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.RegisteredBy">
            <summary>
        Gets the user that the application was registered by.
        </summary>
            <value>The user that the application was registered by.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.Scope">
            <summary>
        Gets the registered scope of the application in array of strings.
        </summary>
            <value>The registered scope of the application in array of strings.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.ScopeAsString">
            <summary>
        Gets the registered scope of the application in string with space separator.
        </summary>
            <value>The registered scope of the application in string with space separator.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.Status">
            <summary>
        Gets the status of the application.
        </summary>
            <value>The status of the application.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASApplication.WeakDelegate">
            <summary>An object that can respond to the delegate protocol for this type.</summary>
            <value>
            The instance that will respond to events and data requests.
            This value can be null.       
        </value>
            <remarks>
            The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.
            When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events.
        </remarks>
        </member>
        <member name="T:MASFoundation.MASAuthCredentials">
            <summary>
         MASAuthCredentials class is designed to allow customization on device registration and/or user authentication on MASFoundation.
         Any customization, such as sending additional parameters, or processing customized logic on device registration and/or user authentication, can be handled by inheriting MASAuthCredentials class in application layer.
    </summary>
            <remarks>
         MASAuthCredentials class and any extended classes will be consumed by Mobile SDK in two scenarios:
            1. Device registration request
                * Default API path: /connect/device/register
                * Request type: MASRequestResponseTypeTextPlain
            2. Session authentication request
                * Default API path: /auth/oauth/v2/token
                * Request type: MASRequestResponseTypeWwwFormUrlEncoded
         <para>
         **Important Note**
            * For device registration, the payload (parameter) of the request contains CSR (certificate signing request) based on csrUsername that was passed in. This payload should not be modified or altered, as it is generated in a specific way by Mobile SDK.
            * Value of csrUsername should be username, in case of password grant flow, otherwise, it is recommended to be socialLogin.
         </para>
         An application that extends this MASAuthCredentials class should follow below steps:
         
            1. Create a customization class by inheriting MASAuthCredentials class
            2. Define any custom property in the class, and determines where it will be sent (either header, or parameter of device registration and/or token endpoint)
            3. Override getHeaders, and getParameters methods and get default headers and parameters from super class
            4. Add or modify any necessary values in these methods
        <para>
         Any specification or requirement on above APIs, please refer to Swagger documentation on Server side, or consult with server admin.
         Any customization based on existing flow can be referenced in MASAuthCredentialsPassword class in MASFoundation.   
        </para></remarks>
        </member>
        <member name="C:MASFoundation.MASAuthCredentials">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASAuthCredentials(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASAuthCredentials(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASAuthCredentials(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASAuthCredentials(System.String,System.String,System.Boolean,System.Boolean)">
            <param name="credentialsType">string value of unique identifier for auth credentials type such as OAuth2 grant type.</param>
            <param name="csrUsername">string value of username registering the device against MAG.</param>
            <param name="canRegisterDevice">bool value indicating whether auth credentials type can be used for device registration against MAG.</param>
            <param name="isReusable">bool value indicating whether auth credentials type can be re-used multiple times.</param>
            <summary>
            Initializes MASAuthCredentials object.
            <para> 
            This initialization method is intended to be used in any extended classes of MASAuthCredentials, and not to be used directly in application's code.
            Arguments on this initialization method are read-only properties along with registerEndpoint and tokenEndpoint.
            </para></summary>
            <remarks>Make sure to initialize custom MASAuthCredentials object within custom MASAuthCredentials' init method.</remarks>
        </member>
        <member name="C:MASFoundation.MASAuthCredentials(System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <param name="credentialsType">string value of unique identifier for auth credentials type such as OAuth2 grant type.</param>
            <param name="csrUsername">string value of username registering the device against MAG.</param>
            <param name="canRegisterDevice">bool value indicating whether auth credentials type can be used for device registration against MAG.</param>
            <param name="isReusable">bool value indicating whether auth credentials type can be re-used multiple times.</param>
            <param name="registerEndpoint">string value of MAG device registration endpoint.</param>
            <param name="tokenEndpoint">string value of OTK token endpoint.</param>
            <summary>
            Initializes MASAuthCredentials object.
            <para>
                This initialization method is intended to be used in any extended classes of MASAuthCredentials, and not to be used directly in application's code.
                Arguments on this initialization method are read-only properties.                        
            </para></summary>
            <remarks>Make sure to initialize custom MASAuthCredentials object within custom MASAuthCredentials' init method.</remarks>
        </member>
        <member name="P:MASFoundation.MASAuthCredentials.CanRegisterDevice">
            <summary>
        Gets a value indicating whether this <see cref="T:MASFoundation.MASAuthCredentials" /> can register device.
        </summary>
            <value>
                <c>true</c> if can register device; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthCredentials.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASAuthCredentials.ClearCredentials">
            <summary>
        Clears the credentials.
        </summary>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthCredentials.CredentialsType">
            <summary>
        Authentication credentials type.
        </summary>
            <value>The type of the authentication credentials.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthCredentials.CsrUsername">
            <summary>Internal username value for device registration's generating CSR.</summary>
            <value>csrUsername value should be assigned to username registering the device against MAG during custom MASAuthCredentials object initialization.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthCredentials.Headers">
            <summary>Prepare all required header values for the registration/authentication request</summary>
            <value>NSDictionary of all required headers</value>
            <remarks> 
             Inherited MASAuthCredentials class should override and call parent's getHeaders method in order to customize, or modify header values for following requests
                * device registration (default: "/connect/device/register")
                * session authentication (default: "/auth/oauth/v2/token")
             <para>
             By default, the minimum required header values for each request are:
             </para>
             Device Registration:
                * client-authorization
                * device-id
                * device-name
                * create-session
                * cert-format
             <para> 
             Session Authentication:
                * authorization
             </para>
             The above header values are automatically populated by the Mobile SDK based on the settings of the application. You can override these values in the inherited class but you can cause unexpected behaviour in registration and/or authentication if you fail to coordinate with the server side.  You can also add customize header values in registration and/or authentication as needed.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASAuthCredentials.IsReusable">
            <summary>Indicates whether this particular auth credentials can be re-used.</summary>
            <value>boolean indicator whether this particular auth credentials can be re-used.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthCredentials.Parameters">
            <summary>Prepare all required parameter values for the registration/authentication request</summary>
            <value>NSDictionary of all required parameters</value>
            <remarks>
             Inherited MASAuthCredentials class should override and call parent's getParameters method in order to customize, or modify parameter values for following requests
             * device registration (default: "/connect/device/register")
             * session authentication (default: "/auth/oauth/v2/token")
             <para>
             By default, the minimum required header values for each request are:
             </para>
             Device Registration:
                * certificateSigningRequest
             <para>
             Session Authentication:
                * scope
                * grant_type
             </para>
             The above header values are automatically populated by the Mobile SDK based on the settings of the application. You can override these values in the inherited class but you can cause unexpected behaviour in registration and/or authentication if you fail to coordinate with the server side.  You can also add customize header values in registration and/or authentication as needed.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASAuthCredentials.RegisterEndpoint">
            <summary>MAG system endpoint for device registration of current auth credentials type</summary>
            <value>NSString containing the register endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthCredentials.TokenEndpoint">
            <summary>OTK system endpoint for user/client authentication of current auth credentials type.</summary>
            <value>NSString containing the token endpoint.</value>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASAuthCredentialsAuthorizationCode">
            <summary>
    The `MASAuthCredentialsAuthorizationCode` class is representation of Authorization code auth credentials.
    </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASAuthCredentialsAuthorizationCode">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASAuthCredentialsAuthorizationCode(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASAuthCredentialsAuthorizationCode(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASAuthCredentialsAuthorizationCode(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASAuthCredentialsAuthorizationCode.AuthorizationCode">
            <summary>
            Gets the authorization code.
        </summary>
            <value>The authorization code.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthCredentialsAuthorizationCode.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASAuthCredentialsAuthorizationCode.InitWithAuthorizationCode(System.String)">
            <param name="authorizationCode">string of authorization code for credentials in string.</param>
            <summary>
        Designated factory method to construct MASAuthCredentials object for authorization code credentials.
        </summary>
            <returns>MASAuthCredentialsAuthorizationCode object that can be used as auth credentials to register or login.</returns>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASAuthCredentialsBlock">
            <param name="authCredentials">MASAuthCredentials object.</param>
            <param name="cancel">boolean indicator whether this particular auth credentials can be canceled.</param>
            <param name="completionBlock">MASCompletionErrorBlock block.</param>
            <summary>The MASAuthCredentialsBlock to provide auth credentials for device registration and/or user authentication.</summary>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASAuthCredentialsJWT">
            <summary>
        The `MASAuthCredentialsJWT` class is representation of JWT auth credentials.
    </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASAuthCredentialsJWT">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASAuthCredentialsJWT(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASAuthCredentialsJWT(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASAuthCredentialsJWT(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASAuthCredentialsJWT.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASAuthCredentialsJWT.InitWithJWT(System.String,System.String)">
            <param name="jwt">string of JWT's token type for credentials.</param>
            <param name="tokenType">Token type.</param>
            <summary>
        Designated factory method to construct MASAuthCredentials object for JWT credentials
        </summary>
            <returns>MASAuthCredentialsJWT object that can be used as auth credentials to register or login.</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthCredentialsJWT.Jwt">
            <summary>
        Gets the jwt.
        </summary>
            <value>The jwt.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthCredentialsJWT.TokenType">
            <summary>
        Gets the type of the JWT.
        </summary>
            <value>The type of the JWT.</value>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASAuthCredentialsPassword">
            <summary>
        The `MASAuthCredentialsPassword` class is representation of username/password auth credentials.
    </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASAuthCredentialsPassword">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASAuthCredentialsPassword(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASAuthCredentialsPassword(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASAuthCredentialsPassword(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASAuthCredentialsPassword.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASAuthCredentialsPassword.InitWithUsername(System.String,System.String)">
            <param name="username">string of username for credentials.</param>
            <param name="password">string of password for credentials.</param>
            <summary>
        MASAuthCredentialsPassword.
        </summary>
            <returns>MASAuthCredentialsPassword object that can be used as auth credentials to register or login.</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthCredentialsPassword.Password">
            <summary>
        Gets the password.
        </summary>
            <value>The password.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthCredentialsPassword.Username">
            <summary>
        Gets the username.
        </summary>
            <value>The username.</value>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASAuthenticationStatus">
            <summary>MASAuthenticationStatus states the authentication status of the application..</summary>
            <remarks />
        </member>
        <member name="F:MASFoundation.MASAuthenticationStatus.LoginAnonymously">
            <summary>LoginAnonymously represents that the app has been authenticated with client credentials.</summary>
        </member>
        <member name="F:MASFoundation.MASAuthenticationStatus.LoginWithUser">
            <summary>LoginWithUser represents that the app has been authenticated with user.</summary>
        </member>
        <member name="F:MASFoundation.MASAuthenticationStatus.NotLoggedIn">
            <summary>NotLoggedIn represents that the app has not been authenticated.</summary>
        </member>
        <member name="T:MASFoundation.MASAuthorizationResponse">
            <summary>
        MASAuthorizationResponseDelegate protocol is an optional protocol that may be implemented to handle the response of authorization code from social login provider's authorization.
        These protocols may be implemented in the designated class where social login authentication is being processed.
        <para> 
        Alternatively, NSNotification can be subscribed to perform exactly the same behaviour.    
        </para></summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASAuthorizationResponse">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASAuthorizationResponse(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASAuthorizationResponse(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASAuthorizationResponse.Application(UIKit.UIApplication,Foundation.NSUrl,Foundation.NSDictionary{Foundation.NSString,Foundation.NSObject})">
            <param name="app">UIApplication object as passed in UIApplicationOpenUrlOptions.</param>
            <param name="url">NSURL object as passed in UIApplicationOpenUrlOptions.</param>
            <param name="options">NSDictionary as passed in UIApplicationOpenUrlOptions.</param>
            <summary>
            Prase returned URL from SFSafariViewController with authorization code and OAuth state.
            Call this method inside MonoTouch.UIKit.UIApplicationDelegate.OpenUrl of the AppDelegate for the application.
            This method should be invoked in order to properly perform social login in MASFoundation SDK.
        </summary>
            <returns>bool value whether the URL is specific for social login in MASFoundation or not.</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASAuthorizationResponse.Application(UIKit.UIApplication,Foundation.NSUrl,System.String,Foundation.NSObject)">
            <param name="application">UIApplication object as passed in UIApplicationOpenUrlOptions.</param>
            <param name="url">NSURL object as passed in UIApplicationOpenUrlOptions.</param>
            <param name="sourceApplication">NSDictionary as passed in UIApplicationOpenUrlOptions.</param>
            <param name="annotation">annotation as passed in UIApplicationOpenUrlOptions.</param>
            <summary>
        Prase returned URL from SFSafariViewController with authorization code and OAuth state.
        Call this method inside MonoTouch.UIKit.UIApplicationDelegate.OpenUrl of the AppDelegate for the application.
        This method should be invoked in order to properly perform social login in MASFoundation SDK.
        </summary>
            <returns>bool value whether the URL is specific for social login in MASFoundation or not..</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthorizationResponse.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASAuthorizationResponse.Delegate">
            <summary>Delegate property for delegation of MASAuthorizationResponse protocols</summary>
            <value>MASAuthorizationResponseDelegate.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASAuthorizationResponse.Dispose(System.Boolean)">
            <param name="disposing">If set to <c>true</c>, the method is invoked directly and will dispose manage and unmanaged resources; If set to <c>false</c> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</param>
            <summary>Releases the resources used by the MASAuthorizationResponse object.</summary>
            <remarks>
            This method is called by both the Dispose() method and the object finalizer (Finalize). When invoked by the Dispose method, the parameter disposing disposing is set to true and any managed object references that this object holds are also disposed or released; when invoked by the object finalizer, on the finalizer thread the value is set to false.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASAuthorizationResponse.SharedInstance">
            <summary>
        Retrieve the shared MASAuthorizationResponse singleton.
        <para>Note, subclasses should override this version of the method.</para></summary>
            <returns>Returns the shared MASAuthorizationResponse singleton.</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASAuthorizationResponse.WeakDelegate">
            <summary>An object that can respond to the delegate protocol for this type.</summary>
            <value>
            The instance that will respond to events and data requests.
            This value can be null.       
        </value>
            <remarks>
            The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.
            When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events.
        </remarks>
        </member>
        <member name="T:MASFoundation.MASAuthorizationResponseDelegate">
            <summary>
        MASAuthorizationResponseDelegate protocol is an optional protocol that may be implemented to handle the response of authorization code from social login provider's authorization.
        These protocols may be implemented in the designated class where social login authentication is being processed.        
    </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASAuthorizationResponseDelegate">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASAuthorizationResponseDelegate(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASAuthorizationResponseDelegate(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASAuthorizationResponseDelegate.DidReceiveAuthorizationCode(System.String)">
            <param name="code">string of authorization code.</param>
            <summary>Delegation method to notify with authorization code when the authentication process is done.</summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASAuthorizationResponseDelegate.DidReceiveError(Foundation.NSError)">
            <param name="error">NSError object of the encountered error.</param>
            <summary>Delegation method to notify when an error is encountered during the authentication process.</summary>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASCompletionErrorBlock">
            <param name="completed">Indicates if the operation was completed successfully.</param>
            <param name="error">NSError object in case any error is encountered during the process.</param>
            <summary>A standard (bool completed, NSError error) block</summary>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASConfiguration">
            <summary>
    The `MASConfiguration` class is a local representation of configuration data.
    </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASConfiguration">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASConfiguration(Foundation.NSDictionary)">
            <param name="info">NSDictionary of configuration information.</param>
            <summary>
        Initializer to perform a default initialization.
        </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASConfiguration(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASConfiguration(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASConfiguration.ApplicationClients">
            <summary>
        ** Internal usage only; READ ONLY **
        
        Gets the application static clients.
        </summary>
            <value>The application clients.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.ApplicationCredentialsAreDynamic">
            <summary>
        ** Internal usage only; READ ONLY **
        
        Gets a value indicating whether this <see cref="T:MASFoundation.MASConfiguration" /> application credentials
        are dynamic or static.
        </summary>
            <value>
                <c>true</c> if application credentials are dynamic; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.ApplicationDescription">
            <summary>
        Gets the application description.
        </summary>
            <value>The application description.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.ApplicationName">
            <summary>
        Gets the name of the application.
        </summary>
            <value>The name of the application.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.ApplicationOrganization">
            <summary>
        Gets the organization name of the application.
        </summary>
            <value>The application organization.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.ApplicationRegisteredBy">
            <summary>
        Gets the name of the entity that registered the application.
        </summary>
            <value>The application registered by.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.ApplicationType">
            <summary>
        Gets the type of the application.
        </summary>
            <value>The type of the application.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.AuthenticateOTPEndpointPath">
            <summary>
        Gets the authenticate OTP endpoint.
        </summary>
            <value>The authenticate OTP endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.AuthorizationEndpointPath">
            <summary>
        Gets the authorization endpoint.
        </summary>
            <value>The authorization endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.BluetoothCharacteristicUuid">
            <summary>
        Gets the bluetooth characteristic UUID.
        </summary>
            <value>The bluetooth characteristic UUID.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.BluetoothRssi">
            <summary>
        Gets the bluetooth rssi.
        </summary>
            <value>The bluetooth rssi.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.BluetoothServiceUuid">
            <summary>
        Gets the bluetooth service UUID.
        </summary>
            <value>The bluetooth service UUID.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASConfiguration.ClientInitializeEndpointPath">
            <summary>
        Gets the client initialize endpoint.
        </summary>
            <value>The client initialize endpoint.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASConfiguration.CompareWithCurrentConfiguration(Foundation.NSDictionary)">
            <param name="newConfiguration">NSDictionary of new configuration to compare.</param>
            <summary>
        Internal function to compare the configuration JSON object with current configuration.
        </summary>
            <returns>
                <c>true</c>, if with current configuration was compared, <c>false</c> otherwise.</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.CurrentConfiguration">
            <summary>
        Gets the application's configuration object. This is a singleton object.
        </summary>
            <value>The singleton 'MASConfiguration' object.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.DefaultApplicationClientIdentifier">
            <summary>
        Gets the default application client identifier.
        </summary>
            <value>The default application client identifier.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.DefaultApplicationClientInfo">
            <summary>
        Gets the default application client info.
        </summary>
            <value>The default application client info.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.DefaultApplicationClientSecret">
            <summary>
        Gets the default application client secret.
        </summary>
            <value>The default application client secret.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASConfiguration.DetectServerChangeWithCurrentConfiguration(Foundation.NSDictionary)">
            <param name="newConfiguration">NSDictionary of new configuration to compare.</param>
            <summary>
        Internal function to determine the server change based on HTTP scheme, hostname and port number between two configurations.
        </summary>
            <returns>
                <c>true</c>, if server change with current configuration was detected, <c>false</c> otherwise.</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.DeviceListAllEndpointPath">
            <summary>
        Gets the device list endpoint.
        </summary>
            <value>The device list endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.DeviceRegisterClientEndpointPath">
            <summary>
        Gets the device registration as client credentials endpoint.
        </summary>
            <value>The device registration as client credentials endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.DeviceRegisterEndpointPath">
            <summary>
        Gets the device registration endpoint.
        </summary>
            <value>The device registration endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.DeviceRemoveEndpointPath">
            <summary>
        Gets the device de-registration endpoint.
        </summary>
            <value>The device de-registration endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.DeviceRenewEndpointPath">
            <summary>
        Gets the device client certificate renew endpoint path.
        </summary>
            <value>The device client certificate renew endpoint path.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.EnabledPublicKeyPinning">
            <summary>
        Determines SDK is enabled for public key pinning for authentication challenge.  This read only value is within
        the JSON configuration file.
        </summary>
            <value>
                <c>true</c> if enabled public key pinning; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.EnabledTrustedPublicPKI">
            <summary>
        Determines SDK is enabled for trusted public PKI for authentication challenge.  This read only value is within
        the JSON configuration file.
        </summary>
            <value>
                <c>true</c> if enabled trusted public pki; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASConfiguration.EndpointPathForKey(System.String)">
            <param name="endpointKey">The key which applies to the endpoint path.</param>
            <summary>
        Retrieves an endpoint path fragment for a given endpoint key.
        </summary>
            <returns>The path for key.</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.EnterpriseBrowserEndpointPath">
            <summary>
        Gets the enterprise browser endpoint.
        </summary>
            <value>The enterprise browser endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.GatewayCertificates">
            <summary>
        Gets the public server certificate of the Gateway as obtained from the configuration.
        </summary>
            <value>The array of strings of the gateway's public certificate.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.GatewayCertificatesAsDERData">
            <summary>
        Gets the public server certificate of the Gateway guaraneteed to be in DER format.
        </summary>
            <value>The gateway certificates as DER Data format.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.GatewayCertificatesAsPEMData">
            <summary>
        Gets the public server certificate of the Gateway guaraneteed to be in PEM format.
        </summary>
            <value>The gateway certificates as PEM Data format.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.GatewayHostName">
            <summary>
        Gets the name of the gateway host.
        </summary>
            <value>The name of the gateway host.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.GatewayPort">
            <summary>
        Gets the gateway port.
        </summary>
            <value>The gateway port.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.GatewayPrefix">
            <summary>
        Gets the gateway prefix.
        </summary>
            <value>The gateway prefix.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.GatewayUrl">
            <summary>
        Gets the full URL of the Gateway including the prefix, hostname and port in a https://hostname:port/prefix (if exists)&gt; format.
        </summary>
            <value>The gateway URL in NSUrl object with https://hostname:port/prefix (if exists)&gt; format.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.InstanceFromStorage">
            <summary>
        Gets the instance from internal storage.
        </summary>
            <value>The instance from storage.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.IsLoaded">
            <summary>
        Gets a value indicating whether this <see cref="T:MASFoundation.MASConfiguration" /> is loaded.
        <para>true if it has successfully loaded and is ready for use.</para><para>false if not yet loaded or perhaps an error has occurred during attempting to load.</para></summary>
            <value>
                <c>true</c> if is loaded; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.LocationIsRequired">
            <summary>
        Determines if a user's location coordinates are required.  This read only value 
        is within the JSON configuration file and is set as a requirement of the application
        on the Gateway.This means that a set of location coordinates must be sent in the
        header of all protected endpoint HTTP request to the API on the Gateway.        
        <para>If these are not sent when this is YES the Gateway will validate this and return
        an error response.</para></summary>
            <value>
                <c>true</c> if location is required; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASConfiguration.RemoveSecurityConfigurationForDomain(Foundation.NSUrl)">
            <param name="domain">NSUrl of the targeted host including HTTP scheme, hostname and port number in http://hostname:port format.</param>
            <summary>
        Removes security configuration object based on the domain (host, and port number).
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASConfiguration.Reset">
            <summary>
        Reset this instance.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASConfiguration.SaveToStorage">
            <summary>
        Saves MASConfiguration object to storage.
        </summary>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.ScimPathEndpointPath">
            <summary>
        Gets the scim endpoint.
        </summary>
            <value>The scim endpoint.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASConfiguration.SecurityConfigurationForDomain(Foundation.NSUrl)">
            <param name="domain">NSUrl of the targeted host including HTTP scheme, hostname and port number in http://hostname:port format.</param>
            <summary>
        Returns MASSecurityConfiguration object for a specific domain.
        </summary>
            <returns>The MASSecurityConfiguration object for domain.</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.SecurityConfigurations">
            <summary>
        Returns an array of MASSecurityConfiguration objects for each host.
        </summary>
            <value>The array of currently active MASSecurityConfigurations.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASConfiguration.SetSecurityConfiguration(MASFoundation.MASSecurityConfiguration,Foundation.NSError@)">
            <param name="securityConfiguration">MASSecurityConfiguration object with host, and security measure configuration values.</param>
            <param name="error">NSError object reference to notify any error occurred while validating MASSecurityConfiguration.</param>
            <summary>
        Sets security measure for SSL pinning, and SSL validation for specified host in MASSecurityConfiguration object.     
        <para>MASSecurityConfiguration must have valid host in NSUrl object with port number(port number is mandatory), at least one pinning information(either certificates, or public key hashes), or trust public PKI.If public PKI is not trusted, and no pinning information is provided, it will fail to store the security configuration object, and eventually fail on evaluating SSL for requests.</para><para>Upon SDK initialization, MASConfiguration.CurrentConfiguration.GatewayUrl's MASSecurityConfiguration object will be overwritten. If primary gateway's security configuration has to be modified, ensure to set security configuration after SDK initialization.</para></summary>
            <returns>
                <c>true</c>, if security configuration was set, <c>false</c> otherwise.</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.SsoEnabled">
            <summary>
        Determines if the client's SSO is enabled or not.  This value
        is read from JSON configuration, if there is no value defined in keychain.
        </summary>
            <value>
                <c>true</c> if sso enabled; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.StoragePathEndpointPath">
            <summary>
        Gets the storage endpoint.
        </summary>
            <value>The storage endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.TokenEndpointPath">
            <summary>
        Gets the OAuth 2 token endpoint.
        </summary>
            <value>The OAuth 2 token endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.TokenRevokeEndpointPath">
            <summary>
        Gets the OAuth 2 token revoke endpoint.
        </summary>
            <value>The OAuth 2 token revoke endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.TrustedCertPinnedPublicKeyHashes">
            <summary>
        Gets the array of trusted public key hashes for certificate pinning.
        </summary>
            <value>The trusted cert pinned public key hashes.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.UserInfoEndpointPath">
            <summary>
        Gets the user info endpoint.
        </summary>
            <value>The user info endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.UserSessionLogoutEndpointPath">
            <summary>
        Gets the user session logout endpoint.
        </summary>
            <value>The user session logout endpoint.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASConfiguration.UserSessionStatusEndpointPath">
            <summary>
        Gets the user session status endpoint.
        </summary>
            <value>The user session status endpoint.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASConfiguration.ValidateJSONConfiguration(Foundation.NSDictionary)">
            <param name="configuration">Configuration.</param>
            <summary>
        Internal function to validate the configuration.
        </summary>
            <returns>The JSON configuration.</returns>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASDevice">
            <summary>
    The `MASDevice` class is a local representation of device data.
    </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASDevice">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASDevice(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASDevice(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASDevice(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASDevice.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASDevice.CurrentDevice">
            <summary>
        The device the application is running on. This is a singleton object.
        </summary>
            <returns>A singleton 'MASDevice' object.</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASDevice.DeregisterAsync">
            <summary>
        Deregister the application resources on this device. This is a two step operation.
        
        <para>It will first attempt to remove the device's registered record in the cloud.  If it fails,
        an error is returned and the appropriate notification is sent and it will stop there.</para><para>Upon success of the first operation, deregistration in the cloud, it will then attempt to
        wipe the device of all credential settings.  If it fails, an error is returned and the appropriate
        notification is sent.It will stop here.</para><para>*  WARNING #1: </para><para>    A call to deregistration in the same session as the device was initially registered will
            fail and may leave the device in a strange state.This call should work post
            initial registration and a restart of the application.</para><para>* WARNING #2: </para><para>    A successful call to deregistration will leave the current application session
            without required credentials and settings.  You must restart the application
            to re-register the application and retrieve new credentials.</para><para>This should be considered an advanced feature.If you make this available to end users it
        should not be made too easily accessible and the UI control should be marked and possibly labeled
        to accentuate that it will wipe settings both in the cloud and locally on the device. We
        recommend you also provide an additional user confirmation UI component to make it clear to 
        the user what will occur and allow them to cancel the operation or proceed.</para><para>Although an asynchronous block callback parameter is provided for detecting the response,
        optionally you can set that to null and the caller can observe the lifecycle notifications instead.</para></summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASDevice.DeregisterWithCompletion(MASFoundation.MASCompletionErrorBlock)">
            <param name="completion">Completion.</param>
            <summary>
        Deregister the application resources on this device. This is a two step operation.
        
        <para>It will first attempt to remove the device's registered record in the cloud.  If it fails,
        an error is returned and the appropriate notification is sent and it will stop there.</para><para>Upon success of the first operation, deregistration in the cloud, it will then attempt to
        wipe the device of all credential settings.  If it fails, an error is returned and the appropriate
        notification is sent.It will stop here.</para><para>*  WARNING #1: </para><para>    A call to deregistration in the same session as the device was initially registered will
            fail and may leave the device in a strange state.This call should work post
            initial registration and a restart of the application.</para><para>* WARNING #2: </para><para>    A successful call to deregistration will leave the current application session
            without required credentials and settings.  You must restart the application
            to re-register the application and retrieve new credentials.</para><para>This should be considered an advanced feature.If you make this available to end users it
        should not be made too easily accessible and the UI control should be marked and possibly labeled
        to accentuate that it will wipe settings both in the cloud and locally on the device. We
        recommend you also provide an additional user confirmation UI component to make it clear to 
        the user what will occur and allow them to cancel the operation or proceed.</para><para>Although an asynchronous block callback parameter is provided for detecting the response,
        optionally you can set that to null and the caller can observe the lifecycle notifications instead.</para></summary>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASDevice.Identifier">
            <summary>
        The MASDevice identifier.
        </summary>
            <value>The device identifier.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASDevice.IsBeingAuthorized">
            <summary>
        Gets or sets a value indicating whether this <see cref="T:MASFoundation.MASDevice" /> is being authorized with other devices through proximity login.
        </summary>
            <value>
                <c>true</c> if is being authorized; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASDevice.IsRegistered">
            <summary>
        Gets a value indicating whether this <see cref="T:MASFoundation.MASDevice" /> is registered.
        </summary>
            <value>
                <c>true</c> if is registered; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASDevice.Name">
            <summary>
        Gets the MASDevice name.
        </summary>
            <value>The MASDevice name.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASDevice.ResetLocally">
            <summary>
        Reset the application's locally stored data on the device only.  This does NOT call the
        backend service to remove the device record.You must call MASDevice.CurrentDevice().DeregisterWithCompletion() to do that.
        
        <para>WARNING: if you call this method, all access credentials and locally stored configuration related to the application will be removed.
        Re-authentication proccess will be triggered whenever you are trying to access the gateway.</para></summary>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASDevice.Status">
            <summary>
        Gets the MASDevice status.
        </summary>
            <value>The MASDevice status.</value>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASFile">
            <summary>The `MASFile` class is a local representation of file data.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASFile">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASFile(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASFile(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASFile(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASFile.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASFile.Contents">
            <summary>The contents of file as NSData.</summary>
            <value>NSData value.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASFile.DirectoryType">
            <summary>The file directory type.  Default directory type is MASFileDirectoryTypeApplicationSupport.</summary>
            <value>MASFileDirectoryType that indicates which directory to store MASFile into.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASFile.FilePath">
            <summary>The full file path of the file on disk.</summary>
            <value>NSString containing file path.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASFile.FileWithName(System.String,Foundation.NSData)">
            <param name="name">The NSString name of the new file.</param>
            <param name="contents">The NSData contents of the new file.</param>
            <summary>Creates a new 'MASFile' object.</summary>
            <returns>Returns a new 'MASFile' object.</returns>
            <remarks>
            Note, that default directory type is MASFileDirectoryTypeApplicationSupport.
            If you want to have a file in a specific directory, use FileWithName(contents,directoryType)
            <para>
            Available directory types are:
            MASFileDirectoryTypeTemporary
            MASFileDirectoryTypeApplicationSupport
            MASFileDirectoryTypeCachesDirectory
            MASFileDirectoryTypeDocuments
            MASFileDirectoryTypeLibrary
            </para>
            Data stored into file will be automatically protected with.                   
        </remarks>
        </member>
        <member name="M:MASFoundation.MASFile.FileWithName(System.String,Foundation.NSData,MASFoundation.MASFileDirectoryType)">
            <param name="name">The NSString name of the new file.</param>
            <param name="contents">The NSData contents of the new file.</param>
            <param name="directoryType">The MASFileDirectoryType enumeration value of directory type.</param>
            <summary>Creates a new 'MASFile' object with specified directory type.</summary>
            <returns>Returns a new 'MASFile' object.</returns>
            <remarks>
            Note, that default directory type is MASFileDirectoryTypeApplicationSupport.
            If you want to have a file in a specific directory, use FileWithName(contents,directoryType)
            <para>
            Available directory types are:
            MASFileDirectoryTypeTemporary
            MASFileDirectoryTypeApplicationSupport
            MASFileDirectoryTypeCachesDirectory
            MASFileDirectoryTypeDocuments
            MASFileDirectoryTypeLibrary
            </para>
            Data stored into file will be automatically protected with.                   
        </remarks>
        </member>
        <member name="M:MASFoundation.MASFile.FindFileWithName(System.String)">
            <param name="name">The name of the file</param>
            <summary>Find a specific, MASFile in local storage if it exists.</summary>
            <returns>Returns the MASFile that applies to the name, nil if none.</returns>
            <remarks>
            Note, that file is retrieved from Application Support directory in the application directory by default.
            If you want to find a file to a specific directory, use FindFileWithName(name,directoryType)

            Available directory types are:
            <para>
            MASFileDirectoryTypeTemporary
            MASFileDirectoryTypeApplicationSupport
            MASFileDirectoryTypeCachesDirectory
            MASFileDirectoryTypeDocuments
            MASFileDirectoryTypeLibrary     
            </para></remarks>
        </member>
        <member name="M:MASFoundation.MASFile.FindFileWithName(System.String,MASFoundation.MASFileDirectoryType)">
            <param name="name">The name of the file.</param>
            <param name="directoryType">The MASFileDirectoryType enumeration value of directory type.</param>
            <summary>Find a specific, MASFile in local storage from specified directory if it exists.</summary>
            <returns>Returns the MASFile that applies to the name, nil if none.</returns>
            <remarks>
            Available directory types are:
            <para>
            MASFileDirectoryTypeTemporary
            MASFileDirectoryTypeApplicationSupport
            MASFileDirectoryTypeCachesDirectory
            MASFileDirectoryTypeDocuments
            MASFileDirectoryTypeLibrary     
            </para></remarks>
        </member>
        <member name="P:MASFoundation.MASFile.Name">
            <summary>The name of the file.</summary>
            <value>NSString containing the file name.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASFile.Remove">
            <summary>Removes the MASFile locally.</summary>
            <returns>Returns <c>true</c> if success or <c>false</c> if failure.</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASFile.RemoveItemAtFilePath(System.String)">
            <param name="filePath">The file path to find the data to remove.</param>
            <summary>Remove any data at the given file path.</summary>
            <returns>Returns <c>true</c> if removed, <c>false</c> if not.</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASFile.Save">
            <summary>Save the MASFile locally.</summary>
            <returns>Returns <c>true</c> if success or <c>false</c> if failure.</returns>
            <remarks>
            By default, NSDataWritingOptions is set to NSDataWritingFileProtectionComplete.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASFile.SaveWithDataWritingOption(Foundation.NSDataWritingOptions)">
            <param name="option">NSDataWritingOptions containing options for the file.</param>
            <summary>This method saves the file into iOS file system with provided NSDataWritingOptions.</summary>
            <returns>Returns <c>true</c> if success or <c>false</c> if failure.</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASFile.StoreTemporaryItem(Foundation.NSData)">
            <param name="data">The NSData item to store.</param>
            <summary>Stores the given NSData at a temporary location.</summary>
            <returns>Returns the NSString file path where it is stored.</returns>
            <remarks>
            Temporary items are saved with NSDataWritingFileProtectionNone.
        </remarks>
        </member>
        <member name="T:MASFoundation.MASFileDirectoryType">
            <summary>Enumerated MASFileDirectoryType that indicates which directory to store MASFile into.</summary>
            <remarks />
        </member>
        <member name="F:MASFoundation.MASFileDirectoryType.ApplicationSupport">
            <summary>Application Support directory in the application package.</summary>
        </member>
        <member name="F:MASFoundation.MASFileDirectoryType.CachesDirectory">
            <summary>Cache directory in the application package.</summary>
        </member>
        <member name="F:MASFoundation.MASFileDirectoryType.Documents">
            <summary>Documents directory in the application package.</summary>
        </member>
        <member name="F:MASFoundation.MASFileDirectoryType.Library">
            <summary>Library directory in the application package.</summary>
        </member>
        <member name="F:MASFoundation.MASFileDirectoryType.Temporary">
            <summary>Temporary directory in the application package.</summary>
        </member>
        <member name="T:MASFoundation.MASFoundationErrorCode">
            <summary>The enumerated error codes for Foundation level NSErrors.</summary>
            <remarks />
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.AccessTokenDisabled">
            <summary>The Access Token is disabled on the Gateway.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.AccessTokenInvalid">
            <summary>The Access Token is invalid.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.AccessTokenNotGrantedScope">
            <summary>Access Token does not contains expected Scope</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ApplicationAlreadyRegistered">
            <summary>The Application is already registered</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ApplicationInvalid">
            <summary>The Application is Invalid.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ApplicationInvalidMagIdentifer">
            <summary>The Application has ab Invalid MagIdentifer.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ApplicationNotRegistered">
            <summary>The Application is not registered.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ApplicationRedirectUriInvalid">
            <summary>The Application RedirectUri is Invalid.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BBANotEnabled">
            <summary>Browser Based Login is not Enabled.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEAuthorizationFailed">
            <summary>BLE authorization failed.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEAuthorizationPollingFailed">
            <summary>BLE authorization polling failed.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLECentral">
            <summary>BLE Central.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLECentralDeviceNotFound">
            <summary>BLE Central device not found.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEDelegateNotDefined">
            <summary>BLE Delegate not defined.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEInvalidAuthenticationProvider">
            <summary>BLE invalid authentication provider.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEPeripheral">
            <summary>BLE Peripheral.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEPeripheralCharacteristics">
            <summary>BLE Peripheral characteristics.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEPeripheralServices">
            <summary>BLE Peripheral services.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEPoweredOff">
            <summary>BLE powered Off.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEResetting">
            <summary>BLE resetting.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLERSSINotInRange">
            <summary>BLE RSS is not in range.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEUnauthorized">
            <summary>BLE unauthorized.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEUnknownState">
            <summary>BLE Unknown state.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEUnSupported">
            <summary>BLE UnSupported.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.BLEUserDeclined">
            <summary>BLE User declined.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ConfigurationInvalidEndpoint">
            <summary>Endpoint configuration invalid.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ConfigurationInvalidHostForSecurityConfiguration">
            <summary>Invalid Host for Security Configuration.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ConfigurationInvalidPinningInfoForSecurityConfiguration">
            <summary>Invalid pinning information for Security Configuration.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ConfigurationLoadingFailedFileNotFound">
            <summary>Could not load the configuration. File not found.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ConfigurationLoadingFailedJsonSerialization">
            <summary>Could not load the configuration. JSON serialization failed.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ConfigurationLoadingFailedJsonValidation">
            <summary>Could not load the configuration. JSON validation failed.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.Count">
            <summary>Convenience to tell how many errors type exist.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.DeviceAlreadyRegistered">
            <summary>Device is already registered.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.DeviceAlreadyRegisteredWithDifferentFlow">
            <summary>Device is already registered with different flow.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.DeviceCouldNotBeDeregistered">
            <summary>Device could not be deregistered.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.DeviceDoesNotSupportLocalAuthentication">
            <summary>Device does not support local authentication.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.DeviceInvalidAuthCredentialsForDeviceRegistration">
            <summary>Invalid Auth Credentials for Device registration.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.DeviceNotLoggedIn">
            <summary>Device not logged in.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.DeviceNotRegistered">
            <summary>Device not registered.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.DeviceRecordIsNotValid">
            <summary>Device record is not valid.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.DeviceRegistrationAttemptedWithUnregisteredScope">
            <summary>Device registration attempted with unregistered Scope.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.DeviceRegistrationWithoutRequiredParameters">
            <summary>Device registration without required parameters.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.EnterpriseBrowserAppDoesNotExist">
            <summary>Enterprise Browser App does not exist.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.EnterpriseBrowserNativeAppCannotOpen">
            <summary>Enterprise Browser native App cannot Open.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.EnterpriseBrowserNativeAppDoesNotExist">
            <summary>Enterprise Browser native App does not exist.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.EnterpriseBrowserWebAppInvalidURL">
            <summary>Enterprise Browser WebApp invalid URL.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.FlowIsNotActive">
            <summary>Flow is not Active.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.FlowIsNotImplemented">
            <summary>Flow is not implemented.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.FlowTypeUnsupported">
            <summary>Flow Type unsupported.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.GeolocationIsInvalid">
            <summary>Geolocation is invalid.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.GeolocationIsMissing">
            <summary>Geolocation is missing.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.GeolocationIsNotConfigured">
            <summary>Geolocation is not configured.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.GeolocationServicesAreUnauthorized">
            <summary>Geolocation services are unauthorized.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.InvalidAuthorization">
            <summary>Invalid authorization.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.InvalidEnrollmentURL">
            <summary>Invalid enrollment URL.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.InvalidNSDictionary">
            <summary>Invalid NSDictionary.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.InvalidNSURL">
            <summary>Invalid NSURL.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.InvalidOTPChannelSelectionBlock">
            <summary>Invalid OTPChannelSelectionBlock.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.InvalidOTPCredentialsBlock">
            <summary>Invalid OTPCredentialsBlock.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.InvalidOTPProvided">
            <summary>Invalid OTP provided.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.InvalidUserLoginBlock">
            <summary>Invalid UserLoginBlock.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.JWTInvalidClaims">
            <summary>JWT Invalid Claims.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.JWTSerializationError">
            <summary>JWT serialization error.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.JWTUnexpectedClassType">
            <summary>JWT unexpected class type.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.LoginProcessCancel">
            <summary>Login process canceled.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.MASIsNotStarted">
            <summary>MAS is not Started.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.NetworkIsOffline">
            <summary>Network is Offline.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.NetworkNotReachable">
            <summary>Network not reachable.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.NetworkNotStarted">
            <summary>Network not Started.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.NetworkRequestTimedOut">
            <summary>Network request Timed Out.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.NetworkSSLAuthenticationChallengeFailure">
            <summary>Network SSL authentication challenge failure.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.NetworkSSLConnectionCannotBeMade">
            <summary>Network SSL connection cannot be made.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.NetworkUnacceptableContentType">
            <summary>Network unacceptable content type.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.OTPAuthenticationCancelled">
            <summary>OTP authentication canceled.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.OTPChannelSelectionCancelled">
            <summary>OTP channel selection canceled.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.OTPExpired">
            <summary>OTP expired.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.OTPNotProvided">
            <summary>OTP not provided.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.OTPRetryBarred">
            <summary>OTP retry Barred.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.OTPRetryLimitExceeded">
            <summary>OTP retry limit exceeded.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ProximityLoginAuthorizationInProgress">
            <summary>Proximity Login authorization in progress.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ProximityLoginInvalidAuthenticationURL">
            <summary>Proximity Login invalid authentication URL.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ProximityLoginInvalidAuthorizeURL">
            <summary>Proximity Login invalid authorize URL.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.QRCodeProximityLoginAuthorizationPollingFailed">
            <summary>QRCode Proximity Login authorization polling failed.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.ResponseSerializationFailedToParseResponse">
            <summary>Response serialization failed to parse Response.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.SharedStorageNotNilKey">
            <summary>Shared Storage not nil Key.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.TokenIdTokenExpired">
            <summary>IdToken expired.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.TokenIdTokenInvalidAud">
            <summary>IdToken contains invalid Aud.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.TokenIdTokenInvalidAzp">
            <summary>IdToken contains invalid Azp.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.TokenIdTokenInvalidSignature">
            <summary>IdToken contains invalid Signature.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.TokenIdTokenNotExistForLockingUserSession">
            <summary>IdToken does not exist for the locked user session.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.TokenInvalidIdToken">
            <summary>Invalid IdToken.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.Unknown">
            <summary>Unknown error.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.UserAlreadyAuthenticated">
            <summary>User is already authenticated.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.UserBasicCredentialsNotValid">
            <summary>User Basic credentials are not valid.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.UserDoesNotExist">
            <summary>User does not exist.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.UserNotAuthenticated">
            <summary>User is not authenticated.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.UserSessionIsAlreadyLocked">
            <summary>User session is already Locked.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.UserSessionIsAlreadyUnlocked">
            <summary>User session is already Unlocked.</summary>
        </member>
        <member name="F:MASFoundation.MASFoundationErrorCode.UserSessionIsCurrentlyLocked">
            <summary>User session is currently Locked.</summary>
        </member>
        <member name="T:MASFoundation.MASGatewayMonitoringStatus">
            <summary>The enumerated MASGatewayMonitoringStatus types.</summary>
            <remarks />
        </member>
        <member name="F:MASFoundation.MASGatewayMonitoringStatus.Count">
            <summary>Convenience to tell how many status type exist.</summary>
        </member>
        <member name="F:MASFoundation.MASGatewayMonitoringStatus.NotReachable">
            <summary>The network cannot reach the assigned base network url.</summary>
        </member>
        <member name="F:MASFoundation.MASGatewayMonitoringStatus.ReachableViaWiFi">
            <summary>The network can reach the assigned base network url via WiFi.</summary>
        </member>
        <member name="F:MASFoundation.MASGatewayMonitoringStatus.ReachableViaWWAN">
            <summary>The network can reach the assigned base network url via WWAN.</summary>
        </member>
        <member name="F:MASFoundation.MASGatewayMonitoringStatus.Unknown">
            <summary>Unknown Status.</summary>
        </member>
        <member name="T:MASFoundation.MASGatewayMonitorStatusBlock">
            <param name="status">The monitoring status enumerated type.</param>
            <summary>The Gateway monitor status block that will receive a MASGatewayMonitoringStatus update when a new status value change is triggered.</summary>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASGrantFlow">
            <summary>The enumerated MASGrantFlow.</summary>
            <remarks />
        </member>
        <member name="F:MASFoundation.MASGrantFlow.ClientCredentials">
            <summary>The client credentials grant flow.</summary>
        </member>
        <member name="F:MASFoundation.MASGrantFlow.Count">
            <summary>The total number of supported types.</summary>
        </member>
        <member name="F:MASFoundation.MASGrantFlow.Password">
            <summary>The user credentials grant flow.</summary>
        </member>
        <member name="F:MASFoundation.MASGrantFlow.Unknown">
            <summary>Unknown encoding type.</summary>
        </member>
        <member name="T:MASFoundation.MASObject">
            <summary>
    The `MASObject` class is a local representation of data persisted to the MAS cloud. This is the main class that is used to interact with objects in your app.
    </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASObject">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASObject(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASObject(Foundation.NSDictionary{Foundation.NSString,Foundation.NSString})">
            <param name="attributes">NSDictionary to be used as attributes</param>
            <summary>
        Init the object with passed attributes in a form of NSDictionary
        </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASObject(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASObject(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASObject._attributes">
            <summary>
        List of attributes of the object.
        </summary>
            <value>The attributes.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASObject.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASObject.ClassName">
            <summary>
        The class name of the object.
        </summary>
            <value>The name of the class.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASObject.Copy(Foundation.NSZone)">
            <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
            <summary>Performs a copy of the underlying Objective-C object.</summary>
            <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it. It does not actually try to replicate any managed state.</returns>
            <remarks>
            Implementation of the INSCopyable interface.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASObject.EncodeTo(Foundation.NSCoder)">
            <param name="encoder">The encoder object where the state of the object will be stored</param>
            <summary>Encodes the state of the object on the provided encoder</summary>
            <remarks>
            This method is part of the Foundation.NSCoding protocol and is used by applications to preserve the state of the object into an archive.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASObject.ListAttributes">
            <summary>
            List all attributes from the Object.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASObject.ObjectForKey(Foundation.NSObject)">
            <param name="key">The given identifying key for which to return the corresponding value.</param>
            <summary>
            Returns the value associated with a given key.
        </summary>
            <returns>The value associated with a given key.</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASObject.ObjectForKeyedSubscript(Foundation.NSObject)">
            <param name="key">The key for which to return the corresponding value.</param>
            <summary>
            Returns the value associated with a given key.
        </summary>
            <returns>The value associated with a given key.</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASObject.ObjectId">
            <summary>
        The id of the object.
        </summary>
            <value>The object identifier.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASObject.ObjectWithClassName(System.String)">
            <param name="className">A class name can be any alphanumeric string that begins with a letter. It represents an object in your app, like a 'User' or a 'Document'.</param>
            <summary>
        Creates a new MASObject with a class name
        </summary>
            <returns>MASObject that is instantiated with the given class name.</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASObject.ObjectWithClassName(System.String,Foundation.NSDictionary{Foundation.NSString,Foundation.NSString})">
            <param name="className">A class name can be any alphanumeric string that begins with a letter. It represents an object in your app, like a 'User' or a 'Document'.</param>
            <param name="dictionary">A dictionary that will be used as a data.</param>
            <summary>
        Creates a new MASObject with a class name and a dictionary as the data
        </summary>
            <returns>MASObject that is instantiated with the given class name and dictionary.</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASObject.SetObjectForKey(Foundation.NSObject,Foundation.NSCopying)">
            <param name="object">The object for `key`. A strong reference to the object is maintained by MASObject. Raises an `NSInvalidArgumentException` if `object` is `null`. If you need to represent a `null` value - use `NSNull`.</param>
            <param name="key">The key for `object`. Raises an `NSInvalidArgumentException` if `key` is `null`.</param>
            <summary>
        Sets the object associated with a given key.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASObject.SetObjectForKeyedSubscript(Foundation.NSObject,Foundation.NSCopying)">
            <param name="object">The object for `key`. A strong reference to the object is maintained by PFObject. Raises an `NSInvalidArgumentException` if `object` is `null`. If you need to represent a `null` value - use `NSNull`.</param>
            <param name="key">The key for `object`. Raises an `NSInvalidArgumentException` if `key` is `null`.</param>
            <summary>
        Returns the value associated with a given key.
        <para>This method enables usage of literal syntax on `MASObject`. E.g. `object["key"] = "value";`</para></summary>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASRequest">
            <summary>
    MASRequest class is an object created by MASRequestBuilder. It contains all necessary information to invoke an API.
    The class cannot be constructed or changed directly, only through MASRequestBuilder.
    </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASRequest">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASRequest(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASRequest(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASRequest(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASRequest.Body">
            <summary>
        NSDictionary of type/value parameters to put into the body of a request.
        </summary>
            <value>The body.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequest.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASRequest.DeleteFrom(System.Action{MASFoundation.MASRequestBuilder})">
            <param name="block">MASRequestBuilder block containing all parameters to build the request.</param>
            <summary>
        Initialize MASRequest using MASRequestBuilder block and defining the request method as a HTTP DELETE call. This type of HTTP Method type
        places its parameters within the NSURL itself as an HTTP query extension.
        </summary>
            <returns>MASRequestBuilder object.</returns>
            <remarks>
        default values for designated initializer are: isPublic: NO, sign: NO, requestType:MASRequestResponseTypeJson, responseType:MASRequestResponseTypeJson.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASRequest.EndPoint">
            <summary>
        NSString value of the specific end point path fragment to append to the base Gateway URL.  endPoint value can also be defined as full URL format; in this case,
        SDK must be configured to add add the external host as a trusted source using MASSecurityConfiguration object.
        </summary>
            <value>The end point.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASRequest.GetFrom(System.Action{MASFoundation.MASRequestBuilder})">
            <param name="block">MASRequestBuilder block containing all parameters to build the request.</param>
            <summary>
        Initialize MASRequest using MASRequestBuilder block and defining the request method as a HTTP GET call. This type of HTTP Method type
        places its parameters within the NSURL itself as an HTTP query extension.
        </summary>
            <returns>MASRequestBuilder object.</returns>
            <remarks>
        default values for designated initializer are: isPublic: NO, sign: NO, requestType:MASRequestResponseTypeJson, responseType:MASRequestResponseTypeJson.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASRequest.Header">
            <summary>
        NSDictionary of type/value parameters to put into the header of a request.
        </summary>
            <value>The header.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequest.HttpMethod">
            <summary>
        NSString value of the HTTP Method (GET, POST, PUT, DELETE).
        </summary>
            <value>The http method.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequest.IsPublic">
            <summary>
        bool value that determines whether or not to include credentials of primary gateway in the request.
        </summary>
            <value>
                <c>true</c> if is public; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASRequest.PatchTo(System.Action{MASFoundation.MASRequestBuilder})">
            <param name="block">MASRequestBuilder block containing all parameters to build the request.</param>
            <summary>
        Initialize MASRequest using MASRequestBuilder block and defining the request method as a HTTP PATCH call. This type of HTTP Method type
        places its parameters within the NSURL itself as an HTTP query extension.
        </summary>
            <returns>MASRequestBuilder object.</returns>
            <remarks>
        default values for designated initializer are: isPublic: NO, sign: NO, requestType:MASRequestResponseTypeJson, responseType:MASRequestResponseTypeJson.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASRequest.PostTo(System.Action{MASFoundation.MASRequestBuilder})">
            <param name="block">MASRequestBuilder block containing all parameters to build the request.</param>
            <summary>
        Initialize MASRequest using MASRequestBuilder block and defining the request method as a HTTP POST call. This type of HTTP Method type
        places its parameters within the NSURL itself as an HTTP query extension.
        </summary>
            <returns>MASRequestBuilder object.</returns>
            <remarks>
        default values for designated initializer are: isPublic: NO, sign: NO, requestType:MASRequestResponseTypeJson, responseType:MASRequestResponseTypeJson.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASRequest.PutTo(System.Action{MASFoundation.MASRequestBuilder})">
            <param name="block">MASRequestBuilder block containing all parameters to build the request.</param>
            <summary>
        Initialize MASRequest using MASRequestBuilder block and defining the request method as a HTTP PUT call. This type of HTTP Method type
        places its parameters within the NSURL itself as an HTTP query extension.
        </summary>
            <returns>MASRequestBuilder object.</returns>
            <remarks>
        default values for designated initializer are: isPublic: NO, sign: NO, requestType:MASRequestResponseTypeJson, responseType:MASRequestResponseTypeJson.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASRequest.Query">
            <summary>
        NSDictionary of type/value parameters to put into the URL of a request.
        </summary>
            <value>The query.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequest.RequestType">
            <summary>
        MASRequestResponseType value that specifies what type formatting is required for request body.
        </summary>
            <value>The type of the request.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequest.ResponseType">
            <summary>
        MASRequestResponseType value that specifies what type formatting is required for response body.
        </summary>
            <value>The type of the response.</value>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASRequestBuilder">
            <summary>
    MASRequestBuilder class is an object that allows developers to progressively build a request as needed.
    The class is mainly responsible to receive parameters and create a MASRequest object.
    <para>
    Default configuration value for designated initializer, new MASRequestBuilder("GET/PUT/POST/DELETE"), would be:
    isPublic: <c>false</c>,
    sign: <c>false</c>,
    requestType:MASRequestResponseType.Json, 
    responseType:MASRequestResponseType.Json.
    </para></summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASRequestBuilder">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASRequestBuilder(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASRequestBuilder(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASRequestBuilder(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASRequestBuilder(System.String)">
            <param name="method">NSString of the HTTP Method (GET, POST, PUT, DELETE).</param>
            <summary>
        Designated initializer for MASRequestBuilder.
        </summary>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequestBuilder.Body">
            <summary>
        NSDictionary of type/value parameters to put into the body of a request.
        </summary>
            <value>The body.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASRequestBuilder.Build">
            <summary>
        Create a MASRequest object using the parameters from MASRequestBuider
        </summary>
            <returns>MASRequest object.</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequestBuilder.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASRequestBuilder.EndPoint">
            <summary>
        NSString value of the target endpoint.
        </summary>
            <value>The end point.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequestBuilder.Header">
            <summary>
        NSDictionary of type/value parameters to put into the header of a request.
        </summary>
            <value>The header.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequestBuilder.HttpMethod">
            <summary>
        NSString value of the HTTP Method (GET, POST, PUT, DELETE).
        </summary>
            <value>The http method.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequestBuilder.IsPublic">
            <summary>
        bool value that determines whether or not to include credentials of primary gateway in the request.
        </summary>
            <value>
                <c>true</c> if is public; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequestBuilder.Query">
            <summary>
        NSDictionary of type/value parameters to put into the URL of a request.
        </summary>
            <value>The query.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequestBuilder.RequestType">
            <summary>
        MASRequestResponseType value that specifies what type formatting is required for request body.
        </summary>
            <value>The type of the request.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASRequestBuilder.ResponseType">
            <summary>
        MASRequestResponseType value that specifies what type formatting is required for response body.
        </summary>
            <value>The type of the response.</value>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASRequestResponseType">
            <summary>The enumerated MASRequestResponseTypes that can indicate what data format is expected in a request or a response.</summary>
            <remarks />
        </member>
        <member name="F:MASFoundation.MASRequestResponseType.Count">
            <summary>The total number of supported types.</summary>
        </member>
        <member name="F:MASFoundation.MASRequestResponseType.Json">
            <summary>application/json contnent type.</summary>
        </member>
        <member name="F:MASFoundation.MASRequestResponseType.ScimJson">
            <summary>application/scim+json content type.</summary>
        </member>
        <member name="F:MASFoundation.MASRequestResponseType.TextPlain">
            <summary>Text/Plain content type.</summary>
        </member>
        <member name="F:MASFoundation.MASRequestResponseType.Unknown">
            <summary>Unknown content type.</summary>
        </member>
        <member name="F:MASFoundation.MASRequestResponseType.WwwFormUrlEncoded">
            <summary>Standard WWW Form URL content type.</summary>
        </member>
        <member name="F:MASFoundation.MASRequestResponseType.Xml">
            <summary>Standard XML content type.</summary>
        </member>
        <member name="T:MASFoundation.MASResponseInfoErrorBlock">
            <param name="responseInfo">JSON response object.</param>
            <param name="error">NSError object in case any error is encountered during the process.</param>
            <summary>
        A standard (NSDictionary responseInfo, NSError error) block. The response object could potentially
        be any type of object. It is most often used to return NSString JSON responses from HTTP calls for example.
    </summary>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASResponseObjectErrorBlock">
            <param name="response">NSHTTPURLResponse response object.</param>
            <param name="responseObject">Object containing the result of the request.</param>
            <param name="error">NSError object in case any error is encountered during the process</param>
            <summary>A standard (NSHTTPURLResponse response, Object responseObject, NSError error) block.
  The block will be executed when a request finishes the task unsuccessfully, or successfully.
  All of three arguments in the block can be null depends on the result of the request, 
  and response object should be casted to appropriate data type when it is received.</summary>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASResponseObjectErrorResult">
            <summary>
        Result of an MASResponseObjectErrorBlock block that will return the NSHTTPURLResponse object, response object which needs to perform type casting based on the object type, and NSError object when error occurs.  
    </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASResponseObjectErrorResult(Foundation.NSHttpUrlResponse,Foundation.NSObject)">
            <param name="response">NSHTTPURLResponse response object.</param>
            <param name="responseObject">Object containing the result of the request.</param>
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASResponseObjectErrorResult.Response">
            <summary>NSHTTPURLResponse response object.</summary>
            <value />
            <remarks />
        </member>
        <member name="P:MASFoundation.MASResponseObjectErrorResult.ResponseObject">
            <summary>Object containing the result of the request. It should be casted to appropriate data type when it is received.</summary>
            <value />
            <remarks />
        </member>
        <member name="T:MASFoundation.MASSecurityConfiguration">
            <summary>
        MASSecurityConfiguration class is an object that determines security measures for communication between the target host.
        <para>
        The class is mainly responsible for SSL pinning mechanism, as well as for including/excluding credentials from primary gateway in the network communication to the target host.</para><para>Default configuration value for designated initializer, new MASSecurityConfiguration(new NSUrl("https://your_gateway_hostname:port")), would be:
        isPublic: <c>false</c>,
        validateDomainName: <c>true</c>,
        trustPublicPKI: <c>false</c>.
        </para></summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASSecurityConfiguration">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASSecurityConfiguration(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASSecurityConfiguration(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASSecurityConfiguration(Foundation.NSUrl)">
            <param name="url">NSUrl of the targeted host including HTTP scheme, hostname and port number in http://hostname:port format.</param>
            <summary>
        Designated initializer for MASSecurityConfiguration.     
        <para>NSUrl MUST contain the port number as well.</para><para>Default values for designated initializer are: isPublic: false, trustPublicPKI: false, validateDomainName: true.</para></summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASSecurityConfiguration(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASSecurityConfiguration.Certificates">
            <summary>
        NSArray value of pinned certificates.  Certificates must be in PEM encoded CRT; each line should be an item of the certificate array.
        </summary>
            <value>NSArray of the certificates.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASSecurityConfiguration.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASSecurityConfiguration.Host">
            <summary>
        NSUrl value of the target host.
        </summary>
            <value>NSUrl of the host.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASSecurityConfiguration.IsPublic">
            <summary>
        Gets or sets a value determining whether this <see cref="T:MASFoundation.MASSecurityConfiguration" /> to include sensitive credentials from primary gateway in the network communication with the target host.
        </summary>
            <value>
                <c>true</c> if is public; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASSecurityConfiguration.PublicKeyHashes">
            <summary>
        NSArray value of pinned public key hashes.  Public key hashes must be in string format.
        </summary>
            <value>NSArray of the public key hashes.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASSecurityConfiguration.TrustPublicPKI">
            <summary>
        Gets or sets a value determining whether this <see cref="T:MASFoundation.MASSecurityConfiguration" /> to validate the server trust against iOS' trusted root certificates.
        </summary>
            <value>
                <c>true</c> if trust public pki; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASSecurityConfiguration.ValidateDomainName">
            <summary>
        Gets or sets a value determining whether this <see cref="T:MASFoundation.MASSecurityConfiguration" /> to validate validate the domain name of the certificate on the server trust.
        </summary>
            <value>
                <c>true</c> if validate domain name; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASSharedStorage">
            <summary>
     MASSharedStorage class is designed for developers to write, read, and delete NSString or NSData data into shared keychain storage,
     so that multiple applications with same keychain sharing group in the same device can share data between applications.
    
     <para>*Important:* MASSharedStorage will not be available if MASFoundation framework is not initialized; the framework should be initialized prior to write/read/delete any data into MASSharedStorage.</para></summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASSharedStorage">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASSharedStorage(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASSharedStorage(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASSharedStorage(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASSharedStorage.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="M:MASFoundation.MASSharedStorage.DeleteForKey(System.String,Foundation.NSError@)">
            <param name="key">String of the key used to store the data.</param>
            <param name="error">NSError object reference that would notify if there was any error while deleting the data.</param>
            <summary>
        Deletes any data type with the specified key from shared keychain storage.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASSharedStorage.FindDataUsingKey(System.String,Foundation.NSError@)">
            <param name="key">string of the key used to store the NSData</param>
            <param name="error">NSError object reference that would notify if there was any error while retrieving the data</param>
            <summary>
        Finds NSData object stored with the key from shared keychain storage.
        </summary>
            <returns>NSData of data found with the key.</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASSharedStorage.FindStringUsingKey(System.String,Foundation.NSError@)">
            <param name="key">string of the key used to store the string data</param>
            <param name="error">NSError object reference that would notify if there was any error while retrieving the data</param>
            <summary>
        Finds NSString data stored with the key from shared keychain storage.
        </summary>
            <returns>The string of data found with the key.</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASSharedStorage.SaveData(Foundation.NSData,System.String,Foundation.NSError@)">
            <param name="data">NSData object to be stored.</param>
            <param name="key">String of the key used to store the NSData object.</param>
            <param name="error">NSError object reference that would notify if there was any error while storing the data.</param>
            <summary>
        Saves NSData object with the specified key into shared keychain storage.
        Save method can also be used to delete the data from the shared keychain storage by passing nil in data parameter with the key.
        </summary>
            <returns>
                <c>true</c>, if data was saved, <c>false</c> otherwise.</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASSharedStorage.SaveString(System.String,System.String,Foundation.NSError@)">
            <param name="string">String data to be stored.</param>
            <param name="key">NSString of the key used to store the NSString data</param>
            <param name="error">NSError object reference that would notify if there was any error while storing the data</param>
            <summary>
        Saves string data with the specified key into shared keychain storage.
        Save method can also be used to delete the data from the shared keychain storage by passing nil in string parameter with the key.
        </summary>
            <returns>
                <c>true</c>, if string was saved, <c>false</c> otherwise.</returns>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASState">
            <summary>The enumerated MASState that can indicate what state of SDK currently is at.</summary>
            <remarks />
        </member>
        <member name="F:MASFoundation.MASState.DidLoad">
            <summary>State that SDK did load; at this state, all services have been loaded.  This state will only be invoked once for the app's lifecycle.</summary>
        </member>
        <member name="F:MASFoundation.MASState.DidStart">
            <summary>State that SDK did start; at this state, SDK should be fully functional.</summary>
        </member>
        <member name="F:MASFoundation.MASState.DidStop">
            <summary>State that SDK did stop; at this state, SDK is properly stopped and should be able to re-start.</summary>
        </member>
        <member name="F:MASFoundation.MASState.IsBeingStopped">
            <summary>State that SDK is being forced to stop.</summary>
        </member>
        <member name="F:MASFoundation.MASState.NotConfigured">
            <summary>State that SDK has not been initialized and does not have configuration file either in local file system based on the default configuration file name, nor in the keychain storage.</summary>
        </member>
        <member name="F:MASFoundation.MASState.NotInitialized">
            <summary>State that SDK has the active configuration either in the local file system, or keychain storage, but has not been initialized yet.</summary>
        </member>
        <member name="F:MASFoundation.MASState.WillStart">
            <summary>State that SDK will start; at this state, SDK is initializing and preparing all elements required to operate.</summary>
        </member>
        <member name="F:MASFoundation.MASState.WillStop">
            <summary>State that SDK will stop; at this state, SDK is preparing to stop the lifecycle and shutting down all elements and services for the SDK.</summary>
        </member>
        <member name="T:MASFoundation.MASUser">
            <summary>
    The `MASUser` class is a local representation of user data.
    </summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASUser">
            <summary>Default constructor, initializes a new instance of this class.</summary>
            <remarks />
        </member>
        <member name="C:MASFoundation.MASUser(Foundation.NSCoder)">
            <param name="coder">The unarchiver object.</param>
            <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
            <remarks>
            This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization). This is part of the Foundation.NSCoding protocol.

            If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type Foundation.NSCoder and decorate it with the [Export("initWithCoder:"] attribute declaration.

            The state of this object can also be serialized by using the companion method, EncodeTo.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASUser(Foundation.NSObjectFlag)">
            <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
            <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
            <remarks>
            This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place. Once the allocation has taken place, the constructor has to initialize the object. With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.
        </remarks>
        </member>
        <member name="C:MASFoundation.MASUser(System.IntPtr)">
            <param name="handle">Pointer (handle) to the Objective-C class.</param>
            <summary>A constructor used when creating managed representations of unmanaged objects; Called by the runtime.</summary>
            <remarks>
            This constructor is invoked by the runtime infrastructure (ObjCRuntime.GetNSObject (IntPtr)) to create a new managed representation for a pointer to an unmanaged Objective-C object. You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASUser.AccessToken">
            <summary>
        Gets the access token of the user, if authenticated.
        </summary>
            <value>The access token.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.Active">
            <summary>User active status.</summary>
            <value>
                <c>true</c> if is actived; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.Addresses">
            <summary>
        Gets the addresses.
        </summary>
            <value>The addresses.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.AuthCredentialsType">
            <summary>
        Previously, or currently used authCredentialsType for the session.
        <para>If the SDK is not properly initialized, null will be returned regardless of the authentication status of the SDK.</para><para>If the SDK was never authenticated before, SDK will also return null as a result.</para></summary>
            <value>NSString of previously, or currently used authCredentialsType as in String.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.ClassHandle">
            <summary>The handle for this class.</summary>
            <value>The pointer to the Objective-C class.</value>
            <remarks>
            Each Xamarin class mirrors an unmanaged Objective-C class. This value contains the pointer to the Objective-C class.
        </remarks>
        </member>
        <member name="P:MASFoundation.MASUser.CurrentUser">
            <summary>
        GeThe authenticated user for the application, if any. null returned if none. This is a singleton object.
        </summary>
            <value>A singleton 'MASUser' object.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.EmailAddresses">
            <summary>
        Gets the email addresses.
        </summary>
            <value>The email addresses.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.FamilyName">
            <summary>
        Gets the string value of family name.
        </summary>
            <value>The string value of family name.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.FormattedName">
            <summary>
        Gets the string value of formatted name.
        </summary>
            <value>The string value of formatted name.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.GivenName">
            <summary>
        Gets the string value of given name.
        </summary>
            <value>The string value of given name.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.Groups">
            <summary>
        Gets the groups.
        </summary>
            <value>The groups.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.IsAuthenticated">
            <summary>
        Gets a value indicating whether this <see cref="T:MASFoundation.MASUser" /> is authenticated.
        </summary>
            <value>
                <c>true</c> if is authenticated; otherwise, <c>false</c>.
        </value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.IsCurrentUser">
            <summary>
        Gets a value indicating whether this <see cref="T:MASFoundation.MASUser" /> is current user.
        </summary>
            <value>
                <c>true</c> if is current user; otherwise, <c>false</c>.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.IsSessionLocked">
            <summary>
        Gets a value indicating whether this <see cref="T:MASFoundation.MASUser" />'s session is locked.
        </summary>
            <value>
                <c>true</c> if is session locked; otherwise, <c>false</c>.
        </value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.LockSessionAsync">
            <summary>
            Lock currently authenticated user session with device's local authentication (Device's Passcode or Biometric Authentication).
            <para>
            This will lock current user session and block most of operations except for MASUser.CurrentUser.LogoutWithCompletion();
            and MASDevice.CurrentDevice().DeregisterWithCompletion().
            Alternatively, locked user session can be removed by MASUser.CurrentUser.RemoveSessionLock()
            which will remove credentials from protected storage of the device with local authentication.
            </para><para>
            After locking user session, MASUser.CurrentUser will still exists;
            however, MASUser.CurrentUser.IsAuthenticated property will reflect the lock status and will return false until it's unlocked.
            Session lock status can also be checked through MASUser.CurrentUser.isSessionLocked property.
            </para></summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.LockSessionWithCompletion(MASFoundation.MASCompletionErrorBlock)">
            <param name="completion">The MASCompletionErrorBlock block that receives the results.</param>
            <summary>
            Lock currently authenticated user session with device's local authentication (Device's Passcode or Biometric Authentication).
            <para>
            This will lock current user session and block most of operations except for MASUser.CurrentUser.LogoutWithCompletion();
            and MASDevice.CurrentDevice().DeregisterWithCompletion().
            Alternatively, locked user session can be removed by MASUser.CurrentUser.RemoveSessionLock()
            which will remove credentials from protected storage of the device with local authentication.
            </para><para>
            After locking user session, MASUser.CurrentUser will still exists;
            however, MASUser.CurrentUser.IsAuthenticated property will reflect the lock status and will return false until it's unlocked.
            Session lock status can also be checked through MASUser.CurrentUser.isSessionLocked property.
            </para></summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.LoginWithAuthCredentials(MASFoundation.MASAuthCredentials,MASFoundation.MASCompletionErrorBlock)">
            <param name="authCredentials">MASAuthCredentials object that contains credentials.</param>
            <param name="completion">The MASCompletionErrorBlock block that receives the results.  On a successful completion, the user available via MASUser.CurrentUser has been updated with the new information.</param>
            <summary>
            Authenticate a user via asynchronous request with MASAuthCredentials object.
            <para>
            This will accept any objects that inherits from MASAuthCredentials and all MASAuthCredentials objects that adheres device registration/user authentication logics
            on backend services.
            </para><para>
            This will create an MASUser.CurrentUser upon a successful result.
            </para></summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.LoginWithAuthCredentialsAsync(MASFoundation.MASAuthCredentials)">
            <param name="authCredentials">MASAuthCredentials object that contains credentials.</param>
            <summary>
            Authenticate a user via asynchronous request with MASAuthCredentials object.
            <para>
            This will accept any objects that inherits from MASAuthCredentials and all MASAuthCredentials objects that adheres device registration/user authentication logics
            on backend services.
            </para><para>
            This will create an MASUser.CurrentUser upon a successful result.
            </para></summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.LoginWithAuthorizationCode(System.String,MASFoundation.MASCompletionErrorBlock)">
            <param name="authorizationCode">The authorization code for the user.</param>
            <param name="completion">The MASCompletionErrorBlock block that receives the results.  On a successful completion, the user available via MASUser.CurrentUser has been updated with the new information.</param>
            <summary>
            Authenticate a user via asynchronous request with authorization code.
            <para>
            This will create an MASUser.CurrentUser upon a successful result.
            </para></summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.LoginWithAuthorizationCodeAsync(System.String)">
            <param name="authorizationCode">The authorization code for the user.</param>
            <summary>
            Authenticate a user via asynchronous request with authorization code.
            <para>
            This will create an MASUser.CurrentUser upon a successful result.
            </para></summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.LoginWithIdToken(System.String,System.String,MASFoundation.MASCompletionErrorBlock)">
            <param name="idToken">The id_token for the user.</param>
            <param name="tokenType">Token type of id_token.</param>
            <param name="completion">The MASCompletionErrorBlock block that receives the results.  On a successful completion, the user available via MASUser.CurrentUser has been updated with the new information.</param>
            <summary>
            Authenticate a user via asynchronous request with id_token.
            <para>
            This will create an MASUser.CurrentUser upon a successful result.
            </para></summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.LoginWithIdTokenAsync(System.String,System.String)">
            <param name="idToken">The id_token for the user.</param>
            <param name="tokenType">Token type of id_token.</param>
            <summary>
            Authenticate a user via asynchronous request with id_token.
            <para>
            This will create an MASUser.CurrentUser upon a successful result.
            </para></summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.LoginWithUserName(System.String,System.String,MASFoundation.MASCompletionErrorBlock)">
            <param name="userName">The userName of the user.</param>
            <param name="password">The password of the user.</param>
            <param name="completion">The MASCompletionErrorBlock block that receives the results.  On a successful completion, the user available via MASUser.CurrentUser has been updated with the new information.</param>
            <summary>
            Authenticate a user via asynchronous request with basic credentials.
            <para>
            This will create an MASUser.CurrentUser upon a successful result.
            </para></summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.LoginWithUserNameAsync(System.String,System.String)">
            <param name="userName">The userName of the user.</param>
            <param name="password">The password of the user.</param>
            <summary>
            Authenticate a user via asynchronous request with basic credentials.
            <para>
            This will create an MASUser.CurrentUser upon a successful result.
            </para></summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.LogoutAsync">
            <summary>
            Logout an already authenticated user via asynchronous request.
            <para>This will return <c>true</c> upon a successful result.</para></summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.LogoutWithCompletion(MASFoundation.MASCompletionErrorBlock)">
            <param name="completion">The MASCompletionErrorBlock block that receives the results.  On a successful completion, the user
        available via[MASUser currentUser] has been updated with the new information.</param>
            <summary>
        Logout an already authenticated user via asynchronous request.
        <para>This will return <c>true</c> upon a successful result.</para></summary>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.PhoneNumbers">
            <summary>
        Gets the phone numbers.
        </summary>
            <value>The phone numbers.</value>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.Photos">
            <summary>
        Gets the photos.
        </summary>
            <value>The photos.</value>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.RemoveSessionLock">
            <summary>
            Remove user session that had been protected device's local authentication.
            <para>
            This interface can be used when end-user chooses to not provide local authentication and clean up the session.
            </para></summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.RequestUserInfoAsync">
            <summary>
        Requesting userInfo for the MASUser object.
        <para>This method will retrieve additional information on the MASUser object.</para></summary>
            <returns>Returns MASUSer object with updated value which is also available through the current MASUser object that is making this request.</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.RequestUserInfoWithCompletion(MASFoundation.MASUserResponseErrorBlock)">
            <param name="completion">The MASUserResponseErrorBlock block that returns MASUSer object with updated value which is also available through the current MASUser object that is making this request, and NSError object in case any error is encountered during the process.</param>
            <summary>
        Requesting userInfo for the MASUser object.
        This method will retrieve additional information on the MASUser object.
        </summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.UnlockSessionAsync">
            <summary>
        Unlock currently locked user session with device's local authentication (Device's Passcode or Biometric Authentication).
        <para>
        This will unlock current user session and unblock all of the operations through SDK.
        </para><para>
        After unlocking user session, MASUser.CurrentUser will reflect correct authentication and lock status.
        </para></summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.UnlockSessionWithCompletion(MASFoundation.MASCompletionErrorBlock)">
            <param name="completion">MASCompletionErrorBlock block that receives the results.</param>
            <summary>
        Unlock currently locked user session with device's local authentication (Device's Passcode or Biometric Authentication).
        <para>
        This will unlock current user session and unblock all of the operations through SDK.
        </para><para>
        After unlocking user session, MASUser.CurrentUser will reflect correct authentication and lock status.
        </para></summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.UnlockSessionWithUserOperationPromptMessage(System.String,MASFoundation.MASCompletionErrorBlock)">
            <param name="userOperationPrompt">NSString message that will be displayed on system local authentication dialog.</param>
            <param name="completion">MASCompletionErrorBlock block that receives the results.</param>
            <summary>
        Unlock currently locked user session with device's local authentication (Device's Passcode or Biometric Authentication) and specified message on system local authentication dialog.
        <para>
        This will unlock current user session and unblock all of the operations through SDK.
        </para><para>
        After unlocking user session, MASUser.CurrentUser will reflect correct authentication and lock status.
        </para></summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.MASUser.UnlockSessionWithUserOperationPromptMessageAsync(System.String)">
            <param name="userOperationPrompt">NSString message that will be displayed on system local authentication dialog.</param>
            <summary>
        Unlock currently locked user session with device's local authentication (Device's Passcode or Biometric Authentication) and specified message on system local authentication dialog.
        <para>
        This will unlock current user session and unblock all of the operations through SDK.
        </para><para>
        After unlocking user session, MASUser.CurrentUser will reflect correct authentication and lock status.
        </para></summary>
            <returns><![CDATA[Tuple<bool, NSError>, the first item indicates if the operation was completed successfully, the second item may contain an NSError object in case any error is encountered.]]></returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.MASUser.UserName">
            <summary>
        Gets the string value of the username.
        </summary>
            <value>The string value of the username.</value>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASUserAuthCredentialsBlock">
            <param name="authCredentialBlock">MASAuthCredentialsBlock to provide auth credentials.</param>
            <summary>The user auth credentials block that will be invoked by SDK to notify developers to provide auth credentials.</summary>
            <remarks />
        </member>
        <member name="T:MASFoundation.MASUserResponseErrorBlock">
            <param name="user">MASUSer object with updated value which is also available through the current MASUser object that is making this request.</param>
            <param name="error">NSError object in case any error is encountered during the process.</param>
            <summary>The MASUser specific (MASUser user, NSError error) block</summary>
            <remarks />
        </member>
        <member name="T:MASFoundation.NSData_MAS">
            <summary>This category enables encryption methods for the object.</summary>
            <remarks />
        </member>
        <member name="M:MASFoundation.NSData_MAS.DecryptData(Foundation.NSData,Foundation.NSData,System.String,Foundation.NSError@)">
            <param name="This">This instance of the class.</param>
            <param name="data">The NSData object to be decrypted.</param>
            <param name="password">The NSString used as password during the decryption.</param>
            <param name="anError">The NSError variable used for any error returned by the method.</param>
            <summary>Decrypts data using a password passed in the parameter</summary>
            <returns>Return the NSData decrypted object</returns>
            <remarks />
        </member>
        <member name="M:MASFoundation.NSData_MAS.EncryptData(Foundation.NSData,Foundation.NSData,System.String,Foundation.NSError@)">
            <param name="This">This instance of the class.</param>
            <param name="data">The NSData object to be encrypted.</param>
            <param name="password">The NSString used as password during the encryption.</param>
            <param name="anError">The NSError variable used for any error returned by the method.</param>
            <summary>Encrypts data using a password passed in the parameter.</summary>
            <returns>Return the NSData encrypted object.</returns>
            <remarks />
        </member>
        <member name="P:MASFoundation.NSData_MAS.IsEncrypted">
            <summary>Simple, convenient method to determine if the object is encrypted.</summary>
            <value>
                <c>true</c> if object is encrypted, <c>false</c>  if otherwise.</value>
            <remarks />
        </member>
    </members>
</doc>
